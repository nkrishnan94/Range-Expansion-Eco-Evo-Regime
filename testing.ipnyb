{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from stepping_stone_funcs import*\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 7.24 s, sys: 41.7 ms, total: 7.29 s\n",
      "Wall time: 7.29 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "n_gen=20000\n",
    "K=100\n",
    "r=.1\n",
    "alpha=1.1\n",
    "mu=0.001\n",
    "L_init=initialize(K,1,.01)[0]\n",
    "prune=True\n",
    "L_nv = stepping_stone_nonvec(n_gen,## nunmber of gnerations\n",
    "                    K, ## population size\n",
    "                    r,\n",
    "                    alpha,## fitness landscape (Growthrates of each genotype (should be <<1))\n",
    "                    mu,L_init)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([[  2,   0,   2, ...,   0,  -2,  98],\n",
       "        [  1,   0,   0, ...,   0,   0,  98],\n",
       "        [  0,   0,   0, ...,   0,  -5, 105],\n",
       "        ...,\n",
       "        [100,   0,   0, ...,   0,   0,   0],\n",
       "        [100,   0,   0, ...,   0,   0,   0],\n",
       "        [100,   0,   0, ...,   0,   0,   0]]),\n",
       " array([0.        , 0.16082198, 0.16235836, 0.17739445, 0.1786832 ,\n",
       "        0.19265761, 0.19632954, 0.41658913, 0.50402263]),\n",
       " 374)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "L_nv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([[  3,   1,  92,   0,   0,   4],\n",
       "        [  1,   0,  93,   0,   0,   6],\n",
       "        [  2,   2,  92,   0,   0,   4],\n",
       "        ...,\n",
       "        [100,   0,   0,   0,   0,   0],\n",
       "        [100,   0,   0,   0,   0,   0],\n",
       "        [100,   0,   0,   0,   0,   0]]),\n",
       " array([0.        , 0.1       , 0.10965369, 0.12077708, 0.12188682,\n",
       "        0.19452851]),\n",
       " 3691634,\n",
       " 0)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#%%time\n",
    "n_gen=50000\n",
    "K=100\n",
    "r=.1\n",
    "alpha=1.1\n",
    "mu=.001\n",
    "L_init=initialize(K,1,.01)[0]\n",
    "fix_time_spatial(K, ## population size\n",
    "                     r,\n",
    "                     alpha,## fitness landscape (Growthrates of each genotype (should be <<1))\n",
    "                     mu,\n",
    "                     L_init,\n",
    "                     .0001)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([[  1,   0,   0, ...,   0,   0,   0],\n",
       "        [  2,   0,   0, ...,   0,   0,   0],\n",
       "        [  3,   0,   0, ...,   0,   0,   0],\n",
       "        ...,\n",
       "        [200,   0,   0, ...,   0,   0,   0],\n",
       "        [200,   0,   0, ...,   0,   0,   0],\n",
       "        [200,   0,   0, ...,   0,   0,   0]]),\n",
       " array([0.        , 0.1       , 0.10897091, 0.10914897, 0.10935874,\n",
       "        0.10939189, 0.10941489, 0.10960659, 0.10992274, 0.11002502,\n",
       "        0.11013718, 0.11043559, 0.11049147, 0.11067805, 0.11071709,\n",
       "        0.11088267, 0.11114067, 0.11119268, 0.11159191, 0.11208459,\n",
       "        0.11295893, 0.14557204, 0.19571019, 0.21468587, 0.4585885 ,\n",
       "        0.55828935, 0.67297614, 0.89376384, 1.08310879, 1.3117288 ,\n",
       "        1.44101149, 1.4427984 , 1.58563056, 1.58753643, 1.74570349,\n",
       "        1.74763284, 1.91775612, 1.91810091, 1.91855901, 1.91952282,\n",
       "        1.92005492, 2.10939219, 2.11019615, 2.11088281, 2.31970841,\n",
       "        2.32303369, 2.55422351, 3.74116985, 4.52579594, 4.98002367]),\n",
       " 2234425,\n",
       " 0)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#%%time\n",
    "n_gen=50000\n",
    "K=200\n",
    "r=.1\n",
    "alpha=1.1\n",
    "mu=.001\n",
    "L_init=initialize(K,1,.01)[0]\n",
    "fix_time_spatial(K, ## population size\n",
    "                     r,\n",
    "                     alpha,## fitness landscape (Growthrates of each genotype (should be <<1))\n",
    "                     mu,\n",
    "                     L_init,\n",
    "                     .0001)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 2min 36s, sys: 2.53 s, total: 2min 38s\n",
      "Wall time: 2min 59s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "n_gen=50000\n",
    "K=500\n",
    "r=.1\n",
    "alpha=1.1\n",
    "mu=.001\n",
    "L_init=initialize(K,1,.01)[0]\n",
    "fix_time_spatial(K, ## population size\n",
    "                     r,\n",
    "                     alpha,## fitness landscape (Growthrates of each genotype (should be <<1))\n",
    "                     mu,\n",
    "                     L_init,\n",
    "                     .0001)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sim_funcs_vectorize_n import*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 7.08 s, sys: 36.5 ms, total: 7.12 s\n",
      "Wall time: 7.14 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "n_gen=10000\n",
    "K=100\n",
    "r=.1\n",
    "alpha=1.4\n",
    "mu=0.001\n",
    "L_init=initialize(K,1,.01)[0]\n",
    "prune=True\n",
    "L_v = run_stepping_stone(n_gen,## nunmber of gnerations\n",
    "                    K, ## population size\n",
    "                    r,\n",
    "                    alpha,## fitness landscape (Growthrates of each genotype (should be <<1))\n",
    "                    mu,\n",
    "                    L_init,prune,K)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([[  5,  95],\n",
       "        [  1,  99],\n",
       "        [  2,  98],\n",
       "        [  2,  98],\n",
       "        [  3,  97],\n",
       "        [  1,  99],\n",
       "        [  0, 100],\n",
       "        [  0, 100],\n",
       "        [  1,  99],\n",
       "        [  1,  99],\n",
       "        [  1,  99],\n",
       "        [  0, 100],\n",
       "        [  8,  92],\n",
       "        [  4,  96],\n",
       "        [  3,  97],\n",
       "        [  0, 100],\n",
       "        [  4,  96],\n",
       "        [  8,  92],\n",
       "        [  9,  91],\n",
       "        [ 10,  90],\n",
       "        [ 12,  88],\n",
       "        [ 23,  77],\n",
       "        [ 23,  77],\n",
       "        [ 21,  79],\n",
       "        [ 30,  70],\n",
       "        [ 26,  74],\n",
       "        [ 24,  76],\n",
       "        [ 23,  77],\n",
       "        [ 30,  70],\n",
       "        [ 37,  63],\n",
       "        [ 49,  51],\n",
       "        [ 59,  41],\n",
       "        [ 60,  40],\n",
       "        [ 68,  32],\n",
       "        [ 67,  33],\n",
       "        [ 72,  28],\n",
       "        [ 85,  15],\n",
       "        [ 87,  13],\n",
       "        [ 86,  14],\n",
       "        [ 91,   9],\n",
       "        [ 94,   6],\n",
       "        [ 94,   6],\n",
       "        [ 99,   1],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [ 97,   3],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [ 98,   2],\n",
       "        [100,   0],\n",
       "        [ 97,   3],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [ 99,   1],\n",
       "        [ 99,   1],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0],\n",
       "        [100,   0]]), array([0. , 0.1]), 0, 61)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "L_v\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%time\n",
    "n_gen=50000\n",
    "K=100\n",
    "r=.1\n",
    "alpha=1.2\n",
    "mu=.002\n",
    "L_init=initialize(K,1,.01)[0]\n",
    "fix_time_spatial(K, ## population size\n",
    "                 r,\n",
    "                 alpha,## fitness landscape (Growthrates of each genotype (should be <<1))\n",
    "                 mu,\n",
    "                 L_init,\n",
    "                 .05,\n",
    "                 K,\n",
    "                 True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%time\n",
    "n_gen=50000\n",
    "K=100\n",
    "r=.1\n",
    "alpha=1.2\n",
    "mu=.002\n",
    "L_init=initialize(K,1,.01)[0]\n",
    "fix_time_spatial(K, ## population size\n",
    "                 r,\n",
    "                 alpha,## fitness landscape (Growthrates of each genotype (should be <<1))\n",
    "                 mu,\n",
    "                 L_init,\n",
    "                 .05,\n",
    "                 K,\n",
    "                 True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "n_gen=50000\n",
    "K=1000\n",
    "r=.1\n",
    "alpha=1.1\n",
    "mu=0\n",
    "L_init=initialize(K,1,.01)[0]\n",
    "prune=True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "n_gen=5000\n",
    "K=500\n",
    "r=.1\n",
    "alpha=1.1\n",
    "mu=0\n",
    "L_init=initialize(K,1,.01)[0]\n",
    "prune=True\n",
    "K_space = np.array([100,200,500,800,1000])\n",
    "Vs=np.zeros(len(K_space),dtype=np.float64)\n",
    "for i,K in enumerate([100,200,500,800,1000]):\n",
    "    L_init=initialize(K,1,.01)[0]\n",
    "    L_nv = stepping_stone_nonvec(n_gen,## nunmber of gnerations\n",
    "                        K, ## population size\n",
    "                        r,\n",
    "                        alpha,## fitness landscape (Growthrates of each genotype (should be <<1))\n",
    "                        mu,\n",
    "                        L_init)\n",
    "    Vs[i] = L_nv[-1]/(n_gen/200)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "73"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.where(L_nv[0][:,0]==K)[0][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "34246.57534246575"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(5000*500)/np.where(L_nv[0][:,0]==K)[0][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 50.4 s, sys: 484 ms, total: 50.9 s\n",
      "Wall time: 54.9 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "n_gen=50000\n",
    "K=5000\n",
    "r=.1\n",
    "alpha=1.1\n",
    "mu=0\n",
    "L_init=initialize(K,1,.01)[0]\n",
    "prune=True\n",
    "L_nv = stepping_stone_nonvec(n_gen,## nunmber of gnerations\n",
    "                    K, ## population size\n",
    "                    r,\n",
    "                    alpha,## fitness landscape (Growthrates of each genotype (should be <<1))\n",
    "                    mu,L_init)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 4min 23s, sys: 2.22 s, total: 4min 26s\n",
      "Wall time: 4min 42s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "n_gen=100000\n",
    "K=1000\n",
    "r=.1\n",
    "alpha=1.1\n",
    "mu=0\n",
    "L_init=initialize(K,1,.01)[0]\n",
    "prune=True\n",
    "L_nv = stepping_stone_nonvec(n_gen,## nunmber of gnerations\n",
    "                    K, ## population size\n",
    "                    r,\n",
    "                    alpha,## fitness landscape (Growthrates of each genotype (should be <<1))\n",
    "                    mu,L_init)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.375590782173245"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(L_nv[-1]*r**.5)/((n_gen/np.where(L_nv[0][:,0]==K)[0][0])*r)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.60839"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "n_gen=100000\n",
    "K=1000\n",
    "L_nv[-1]/((n_gen/np.where(L_nv[0][:,0]==K)[0][0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "83"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.where(L_nv[0][:,0]==K)[0][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 4min 34s, sys: 2.5 s, total: 4min 36s\n",
      "Wall time: 4min 47s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "n_gen=100000\n",
    "K=1000\n",
    "r=.1\n",
    "alpha=1.1\n",
    "mu=0\n",
    "L_init=initialize(K,1,.01)[0]\n",
    "prune=True\n",
    "L_v = run_stepping_stone(n_gen,## nunmber of gnerations\n",
    "                    K, ## population size\n",
    "                    r,\n",
    "                    alpha,## fitness landscape (Growthrates of each genotype (should be <<1))\n",
    "                    mu,\n",
    "                    L_init,prune,K)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.2145"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "n_gen=100000\n",
    "K=1000\n",
    "L_v[-1]/((n_gen/np.where(L_v[0][:,0]==K)[0][0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "87"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.where(L_nv[0][:,0]==K)[0][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "35"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "L_v[-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 1min 19s, sys: 621 ms, total: 1min 20s\n",
      "Wall time: 1min 22s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "n_gen=100000\n",
    "K=2000\n",
    "r=.1\n",
    "alpha=1.1\n",
    "mu=0\n",
    "L_init=initialize(K,1,.01)[0]\n",
    "prune=True\n",
    "L_v = run_stepping_stone(n_gen,## nunmber of gnerations\n",
    "                    K, ## population size\n",
    "                    r,\n",
    "                    alpha,## fitness landscape (Growthrates of each genotype (should be <<1))\n",
    "                    mu,\n",
    "                    L_init,prune,False)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.26"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "n_gen=100000\n",
    "K=2000\n",
    "L_v[-1]/((n_gen/K))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "80.64516129032258"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    " (K/np.where(L_v[0][:,0]==K)[0][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "80.64516129032258"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(K/np.where(L_v[0][:,0]==K)[0][0])"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "L_v = run_stepping_stone(n_gen,## nunmber of gnerations\n",
    "                K, ## population size\n",
    "                r,\n",
    "                alpha,## fitness landscape (Growthrates of each genotype (should be <<1))\n",
    "                mu,\n",
    "                L_init,prune)\n",
    "\n",
    "Vs[i] = L_v[-1]/(n_gen/200)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "n_gen=5000\n",
    "r=.1\n",
    "alpha=1.1\n",
    "mu=0\n",
    "prune=True\n",
    "K_space = np.array([100,200,500,800,1000])\n",
    "Vs_v=np.zeros(len(K_space),dtype=np.float64)\n",
    "for i,K in enumerate([100,200,500,800,1000]):\n",
    "    L_init=initialize(K,1,.01)[0]\n",
    "    L_v = run_stepping_stone(n_gen,## nunmber of gnerations\n",
    "                    K, ## population size\n",
    "                    r,\n",
    "                    alpha,## fitness landscape (Growthrates of each genotype (should be <<1))\n",
    "                    mu,\n",
    "                    L_init,prune)\n",
    "    \n",
    "    Vs_v[i] = L_v[-1]/(n_gen/200)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1.6 , 0.96, 0.8 , 0.96, 0.84])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Vs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "drive_results=[[],[],[]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "drive_results[0].append(np.array([np.arange(5),np.arange(5)]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[array('hello', dtype='<U5'),\n",
       "  array(['hello', 'hello'], dtype='<U5'),\n",
       "  array([[0, 1, 2, 3, 4],\n",
       "         [0, 1, 2, 3, 4]])],\n",
       " [],\n",
       " []]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "drive_results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "K=1000\n",
    "L=initialize(K,1,.1)[0]\n",
    "L_empty= np.array([K,0])\n",
    "g_rates =np.array([0,1])\n",
    "r=.1\n",
    "alpha=1.025\n",
    "mu=.01\n",
    "g_rates=np.array([0,1])\n",
    "n_allele = len(g_rates) -1\n",
    "\n",
    "P = np.ones((n_allele+1,n_allele+1))\n",
    "P[0,:] = 1 - g_rates\n",
    "\n",
    "alleles=np.arange(len(g_rates))\n",
    "rands = np.random.random((3,np.int(K)))\n",
    "n_demes = np.where(L[:,0]!=K)[0][-1] +2\n",
    "deme_seeds = np.random.randint(0,n_demes,(3,np.int(K)))\n",
    "neighbs = np.append(np.expand_dims(deme_seeds[0,:],0),\n",
    "       np.expand_dims((((rands[0,:]<.5) & (deme_seeds[0,:]) !=0) | (deme_seeds[0,:] == (n_demes -1)) *1) *-2+1 +deme_seeds[0,:],0),axis=0).T\n",
    "\n",
    "neighb_counts = np.bincount(neighbs.flatten(),\n",
    "                            #np.max(neighbs)\n",
    "                           )\n",
    "mig_picks = np.zeros((np.int(K),2),dtype=np.int64)\n",
    "cnt = 0\n",
    "for i in np.unique(neighbs.flatten()):\n",
    "    to_ind = np.random.choice(np.repeat(alleles,L[i]),neighb_counts[i],replace=False)\n",
    "    #to_ind = np.repeat(alleles,L[i])[np.searchsorted(np.arange(0,1,1/(K-1)), rands[2,cnt (cnt+neighb_counts[i])],side=\"right\")]\n",
    "    inds = np.where(neighbs==i)\n",
    "    #mig_picks[np.where(neighbs==i)[0],:].take(np.where(neighbs==i)[1]+np.arange(0,len(np.where(neighbs==i)[1])*2,2)) = np.random.choice(np.repeat(alleles,L[i]),neighb_counts[i],replace=False)\n",
    "    for ind in range(len(inds[0])):\n",
    "        mig_picks[inds[0][ind],inds[1][ind]] = to_ind[ind] \n",
    "    cnt+=1    \n",
    "\n",
    "for i in np.unique(neighbs.flatten()):\n",
    "    #L[i] \n",
    "    #L[i]+= neighbs[np.where(neighbs==i)[0],:].take(np.where(neighbs==i)[1]+np.arange(0,len(np.where(neighbs==i)[1])*2,2))\n",
    "    inds = np.where(neighbs==i)\n",
    "    L[i] -= true_bincount( mig_picks[inds[0],:].take(inds[1]+np.arange(0,len(inds[1])*2,2)),\n",
    "                                                      n_allele+1)\n",
    "    L[i] += true_bincount( mig_picks[inds[0],:].take((inds[1]==0)*1+np.arange(0,len(inds[1])*2,2)),\n",
    "                          n_allele+1) \n",
    "dup_counts = np.bincount(deme_seeds[1,:],\n",
    "                           #np.max(deme_seeds[1,:])\n",
    "                          )\n",
    "dup_picks = np.zeros((np.int(K),2),dtype=np.int64)\n",
    "\n",
    "for i in np.unique(deme_seeds[1,:].flatten()):\n",
    "    dup_picks[np.where(deme_seeds[1,:]==i)] = np.random.choice(np.repeat(alleles,L[i]),(dup_counts[i],2),replace=False)\n",
    "\n",
    "for i in np.unique(deme_seeds[1,:]):\n",
    "    dup_inds = np.where(deme_seeds[1,:]==i)\n",
    "    pairs =  dup_picks[np.where(deme_seeds[1,:]==i)].T\n",
    "    dup_bool =(P[:,pairs[1]].T.take(pairs[0])>rands[0].take(dup_inds[0]))\n",
    "    L[i] +=true_bincount(pairs[:,dup_bool].take(np.arange(len(pairs[:,dup_bool][0]))),n_allele+1) -  true_bincount(pairs[:,dup_bool].take(len(pairs[:,dup_bool][0])+np.arange(len(pairs[:,dup_bool][0]))) ,n_allele+1)\n",
    "\n",
    "mut_counts = np.bincount(deme_seeds[2,:], \n",
    "                           #np.max(deme_seeds[2,:])\n",
    "                          )\n",
    "mut_picks = np.zeros(np.int(K),dtype=np.int64)\n",
    "\n",
    "for i in np.unique(deme_seeds[2,:].flatten()):\n",
    "    mut_picks[np.where(deme_seeds[2,:]==i)] =np.random.choice(np.repeat(alleles,L[i]),(mut_counts[i]),replace=False)\n",
    "\n",
    "\n",
    "mt_cnt = 0\n",
    "for i in np.unique(deme_seeds[2,:]):\n",
    "\n",
    "\n",
    "    to_mut = mut_picks[np.where(deme_seeds[2,:]==i)]\n",
    "    mut_bool =(to_mut != 0 ) & (mu>rands[1,:].take(np.where(deme_seeds[2,:]==i)[0]))\n",
    "\n",
    "    ##remove original cell and add mutated cell to cell counts\n",
    "    s_new = np.random.normal(r*alpha,.001,np.sum(mut_bool))\n",
    "    if s_new.size > 0:\n",
    "        for s in s_new:\n",
    "\n",
    "            g_rates = np.sort(np.append(g_rates,np.asarray(s)))\n",
    "            s_pos = np.where(g_rates==s)[0][0]\n",
    "            #print(s_pos)\n",
    "            L = np.concatenate((L[:,:(s_pos)].T, np.expand_dims(np.zeros(len(L),dtype=np.dtype( np.int64)),0), L[:,(s_pos):].T)).T\n",
    "            #L = np.concatenate((L[:,:(s_pos)].T,np.expand_dims(np.zeros(len(L)).astype(int),0),L[:,(s_pos):].T)).T \n",
    "\n",
    "\n",
    "\n",
    "\n",
    "            P = np.ones((len(g_rates),len(g_rates)))\n",
    "\n",
    "            P[0,:] = 1 - g_rates\n",
    "            #alleles = np.arange(n_allele+1)\n",
    "            L_empty = np.array([K]+[0]*(len(g_rates)-1))\n",
    "            L[i,1] -=1\n",
    "            L[i,s_pos] +=1\n",
    "            mt_cnt+=1\n",
    "#shift = 0\n",
    "#while L[0,0]<int(.02*K):\n",
    "#    L=L[1:,:]\n",
    "#    shift+=1\n",
    "\n",
    "#for i in range(shift):\n",
    "#    L=np.append(L,np.expand_dims(L_empty,0),axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "i=0\n",
    "to_mut = mut_picks[np.where(deme_seeds[2,:]==i)]\n",
    "mut_bool =(to_mut != 0 )  & (mu>rands[1,:].take(np.where(deme_seeds[2,:]==i)[0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([False, False, False, False, False, False, False, False, False,\n",
       "       False, False, False, False, False,  True, False, False, False,\n",
       "       False, False,  True, False, False, False, False, False])"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mut_bool"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.60544895, 0.66961093, 0.52943052, 0.38847457, 0.31327104,\n",
       "       0.94974238, 0.56676759, 0.82921048, 0.11469205, 0.86228571,\n",
       "       0.06864071, 0.3182204 , 0.95942735, 0.71251093, 0.28516477,\n",
       "       0.89900799, 0.10996097, 0.4332883 , 0.78969785, 0.86884449,\n",
       "       0.82504408, 0.34828363, 0.08203012, 0.32501495, 0.14303812,\n",
       "       0.82001156, 0.75634955, 0.76950791])"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "i=2\n",
    "rands[1,:].take(np.where(deme_seeds[2,:]==i)[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([False, False, False, False, False, False, False, False, False,\n",
       "       False, False, False, False, False, False, False, False, False,\n",
       "       False, False, False, False, False, False])"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(mu>rands[1,:].take(np.where(deme_seeds[2,:]==i)[0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "i=0\n",
    "to_mut = mut_picks[np.where(deme_seeds[2,:]==i)]\n",
    "mut_bool =(to_mut != 0 )  & (mu>rands[1,:].take(np.where(deme_seeds[2,:]==i)[0]))\n",
    "\n",
    "\n",
    "##remove original cell and add mutated cell to cell counts\n",
    "if np.sum(mut_bool)>1:\n",
    "\n",
    "    for s_0 in to_mut[mut_bool]:\n",
    "        s= np.random.normal(r*alpha**(s_0),.0001)\n",
    "        g_rates = np.sort(np.append(g_rates,np.asarray(s)))\n",
    "        s_pos = np.where(g_rates==s)[0][0]\n",
    "        #print(s_pos)\n",
    "        L = np.concatenate((L[:,:(s_pos)].T, np.expand_dims(np.zeros(len(L),dtype=np.dtype( np.int64)),0), L[:,(s_pos):].T)).T\n",
    "        #L = np.concatenate((L[:,:(s_pos)].T,np.expand_dims(np.zeros(len(L)).astype(int),0),L[:,(s_pos):].T)).T \n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        P = np.ones((len(g_rates),len(g_rates)))\n",
    "\n",
    "        P[0,:] = 1 - g_rates\n",
    "        #alleles = np.arange(n_allele+1)\n",
    "        L_empty = np.array([K]+[0]*(len(g_rates)-1))\n",
    "        L[i,1] -=1\n",
    "        L[i,s_pos] +=1\n",
    "        mt_cnt+=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s_pos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.025"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "alpha**1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "###computation\n",
    "import numpy as np\n",
    "from numpy import gradient as grad\n",
    "from scipy.integrate import odeint\n",
    "from scipy.interpolate import interp1d\n",
    "import glob\n",
    "import os\n",
    "\n",
    "\n",
    "#visualization\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib import cm\n",
    "import matplotlib as mpl\n",
    "from matplotlib.colors import ListedColormap, LinearSegmentedColormap\n",
    "from matplotlib import rcParams\n",
    "from matplotlib.lines import Line2D\n",
    "\n",
    "from matplotlib.patches import Circle\n",
    "from matplotlib.patches import Rectangle\n",
    "from itertools import product\n",
    "\n",
    "\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "\n",
    "#custom fu\n",
    "from sim_funcs_vectorize_n import*\n",
    "\n",
    "\n",
    "from scipy.optimize import curve_fit\n",
    "##for improved readability of markdown\n",
    "#import warnings f\n",
    "#warnings.filterwarnings('ignore')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "##takes a long time to run!\n",
    "\n",
    "n_gen = 10000\n",
    "K = 5000\n",
    "r = .1\n",
    "alpha = 1.1\n",
    "mu = 0\n",
    "Ltips = []\n",
    "for n in range(10):\n",
    "    for K in [100, 200,500, 1000,2000,5000,10000]:\n",
    "        out = run_stepping_stone(n_gen,## nunmber of gnerations\n",
    "                        K, ## population size\n",
    "                        r,\n",
    "                        alpha,## fitness landscape (Growthrates of each genotype (should be <<1))\n",
    "                        mu,\n",
    "                        initialize(K,1,mu)[0],True)\n",
    "\n",
    "        Ltips.append(np.where(out[0][:,1]>0)[0][-1])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "L"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "L_arr=np.copy(Ltips)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([43, 60, 52, 62, 50, 65, 64, 27, 45, 42, 47, 84, 70, 71, 54, 39, 59,\n",
       "       69, 59, 70, 62, 71, 33, 40, 67, 49, 75, 72, 39, 66, 51, 47, 53, 66,\n",
       "       78, 51, 40, 63, 57, 61, 66, 62, 36, 53, 46, 66, 76, 66, 82, 41, 39,\n",
       "       64, 61, 64, 60, 81, 31, 47, 52, 46, 85, 66, 65, 31, 35, 55, 52, 61,\n",
       "       79, 84])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "L_arr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([42.4, 45.7, 52.4, 57.4, 64.2, 68.3, 72.1])"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1a22e20518>]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot([100, 200,500, 1000,2000,5000,10000],np.mean(L_arr.reshape((10,7)),axis=0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1a23eedbe0>]"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[10000, 10000],\n",
       "       [10002,  9998],\n",
       "       [10003,  9997],\n",
       "       ...,\n",
       "       [20000,     0],\n",
       "       [20000,     0],\n",
       "       [20000,     0]])"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sum(initialize(K,1,.01))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([10000,  9998,  9997,  9996,  9995,  9994,  9992,  9990,  9987,\n",
       "        9984,  9980,  9974,  9967,  9958,  9947,  9932,  9914,  9890,\n",
       "        9859,  9821,  9772,  9709,  9631,  9531,  9406,  9250,  9055,\n",
       "        8815,  8522,  8167,  7745,  7250,  6683,  6049,  5360,  4637,\n",
       "        3905,  3195,  2536,  1950,  1454,  1052,   739,   506,   339,\n",
       "         222,   142,    90,    56,    34,    21,    12,     7,     4,\n",
       "           2,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0,     0,     0,     0,\n",
       "           0,     0,     0,     0,     0,     0])"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "initialize(K,1,.01)[0][:,1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "K=100\n",
    "s=.1\n",
    "U=.001"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-19-cf80966ac4e2>, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-19-cf80966ac4e2>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    vs = 2*(.1* (1+s))**.5 - 2*\u001b[0m\n\u001b[0m                                ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "vs = 2*(.1* (1+s))**.5 - 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1a1dba0390>,\n",
       " <matplotlib.lines.Line2D at 0x1a1dba0da0>]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(out[0][-1][:50])\n",
    "plt.plot(initialize(K,1,mu)[0][:50])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.49458023, 0.48468862, 0.47974282, 0.47479702, 0.46985121,\n",
       "       0.46490541, 0.45501381, 0.45006801, 0.4352306 , 0.42039319,\n",
       "       0.40555579, 0.38577258, 0.36104357, 0.33631455, 0.30169394,\n",
       "       0.27201912, 0.23739851, 0.19783209, 0.16321147, 0.12859086,\n",
       "       0.09891605, 0.07418703, 0.05440382, 0.03956642, 0.02472901,\n",
       "       0.01483741, 0.0098916 , 0.        , 0.        , 0.        ,\n",
       "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "       0.        , 0.        , 0.        , 0.        , 0.        ])"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sum(initialize(K,1,mu)[0][:50][:,1])*initialize(K,1,mu)[0][:50][:,1]*U*s**.5 / K"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([  0,   2,   3,   4,   5,   6,   8,   9,  12,  15,  18,  22,  27,\n",
       "        32,  39,  45,  52,  60,  67,  74,  80,  85,  89,  92,  95,  97,\n",
       "        98, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n",
       "       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "initialize(K,1,mu)[0][:50][:,0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [],
   "source": [
    "##standing wave solution of Fisher wave\n",
    "def standing_wave(y0,x,D,rw):\n",
    "    w = y0[0]      ##initial value for wave profile at x =0, i.e. w(x=0)\n",
    "    z = y0[1]      ##initial value for rate of change of profile w.r.t. position x , at x=0 i.e. dw/dx(x=0)\n",
    "    dwdx = z\n",
    "    dzdx =(-2*((rw*D)**.5)*dwdx -w*rw*(1-w))/D\n",
    "    \n",
    "    return [dwdx,dzdx]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [],
   "source": [
    "def surf_prob(y0,x,rw,rm,D,bfunc):\n",
    "    u = y0[0]  ##initial value for probability at x =0, i.e. u(x=0)\n",
    "    z = y0[1]  ##initial value for rate of change of profile w.r.t. position x , at x=0 i.e. du/dx(x=0)\n",
    "    dudx = z\n",
    "    dzdx =(-(2*((D*rw)**.5))*dudx+ u*(rm)*(1-bfunc(x))-u**2)/D\n",
    "    return [dudx,dzdx]\n",
    "\n",
    "\n",
    "def surf_prob_solve(x, b,rw,rm,D, u0,du0 ):\n",
    "    ##generate a continuous function from initial standing wave\n",
    "    bfunc = interp1d(x,b, bounds_error=False, fill_value=\"extrapolate\")\n",
    "    \n",
    "    ##find range of positions to integrate over\n",
    "    #x = np.linspace(0,len(b)-1,len(b))\n",
    "    ##integarate\n",
    "    s =odeint(surf_prob,[u0,du0],x,args = (rw,rm,D,bfunc))\n",
    "    return s"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 298,
   "metadata": {},
   "outputs": [],
   "source": [
    "##generate data\n",
    "K=100\n",
    "D=1\n",
    "\n",
    "s=.1\n",
    "\n",
    "x_init=500\n",
    "dx =1\n",
    "x = np.linspace(0,int(x_init-dx),int(x_init/dx))\n",
    "r = .1\n",
    "dx =1\n",
    "x = np.linspace(0,int(x_init-dx),int(x_init/dx))\n",
    "b0= 1 \n",
    "db0 = -1/K\n",
    "stand = odeint(standing_wave,[b0,db0],np.arange(500),args=(1,.1))[:,0]\n",
    "L_f = np.where(stand*K<1)[0][0]\n",
    "rm=.11\n",
    "L = (2*3.141 )/( 2*((D*(rm))**.5) * (2*(rm/r -1))**.5)\n",
    "u0 = rm*np.exp(-L)\n",
    "dudx = rm*((D*(rm))**.5)*np.exp(-L)\n",
    "p_surf = surf_prob_solve(np.arange(500)[:L_f],stand[0:L_f],r,rm,D,u0, dudx)\n",
    "fix_count = p_surf[:,0][:L_f]*stand[:L_f]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 333,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x151870e588>]"
      ]
     },
     "execution_count": 333,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "U=.001\n",
    "K = 100\n",
    "plt.plot(stand[:L_f]*K*U*np.log(s*stand[:L_f]*K))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 304,
   "metadata": {},
   "outputs": [],
   "source": [
    "Ne = K*stand[:L_f]\n",
    "U=.001"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 321,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.30357142857142855"
      ]
     },
     "execution_count": 321,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sum(Ne*U* np.log(Ne*.1)>.2)/len(Ne)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 318,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "56"
      ]
     },
     "execution_count": 318,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(Ne)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#from sim_funcs_1 import*\n",
    "from numba import jit,njit\n",
    "import numpy as np\n",
    "from numpy.random import choice\n",
    "from numba import prange\n",
    "import random\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.integrate import odeint \n",
    "from numba import jit,njit\n",
    "##standing wave solution of Fisher wave\n",
    "\n",
    "\n",
    "def standing_wave(y0,x,D,rw):\n",
    "    w = y0[0]      ##initial value for wave profile at x =0, i.e. w(x=0)\n",
    "    z = y0[1]      ##initial value for rate of change of profile w.r.t. position x , at x=0 i.e. dw/dx(x=0)\n",
    "    dwdx = z\n",
    "    dzdx =(-2*((rw*D)**.5)*dwdx -w*rw*(1-w))/D ## fisher equation in comoving frame\n",
    "    \n",
    "    return [dwdx,dzdx]\n",
    "def initialize(K,n_allele,mu):\n",
    "    ## generate standing wave\n",
    "    stand = odeint(standing_wave,[1,-(2*2**.5)/K],np.arange(70),args=(2*2**.5,1))[:,0]\n",
    "    \n",
    "    ## cuttoff non integer cell density based off of carry capacity K\n",
    "    w_0 = (K*stand).astype(int)\n",
    "    w_0 = w_0[w_0>1]\n",
    "    \n",
    "    ## subtract wild type cells from carrying capacity to get 'emopty' particle count\n",
    "    L = np.vstack(((K-w_0),w_0)).T\n",
    "    L = np.append(L,np.zeros((len(w_0),n_allele-1)),axis=1)\n",
    "\n",
    "    ##array strucutre of an empty deme to be added on as needed \n",
    "    L_empty= np.append([K],np.zeros(n_allele,dtype=int))\n",
    "\n",
    "    ## add on some number of empty demes\n",
    "    for i in range(500):\n",
    "        L= np.append(L,[L_empty],axis=0)\n",
    "        \n",
    "    return L.astype(int), L_empty\n",
    "\n",
    "\n",
    "@njit\n",
    "def true_bincount(arr,minlength):\n",
    "    binned = np.bincount(arr)\n",
    "    return np.append(binned,np.zeros(minlength - len(binned),dtype=np.int64))\n",
    "\n",
    "\n",
    "\n",
    "@njit\n",
    "def advindexer(arr,index, to_index):\n",
    "    arr[index] = to_index\n",
    "    return arr\n",
    "    \n",
    "\n",
    "\n",
    "@njit\n",
    "def update(L, ## population\n",
    "    L_empty, ## empty deme structure\n",
    "    P, ## porbability matrix for mutation\n",
    "    K, # population size\n",
    "    g_rates,\n",
    "    r,\n",
    "    alpha,\n",
    "    mu): ##mutation rate\n",
    "        #L_tip = np.where(L[:,0]!=K)[0][-1]\n",
    "    n_allele = len(g_rates) -1\n",
    "\n",
    "    alleles=np.arange(len(g_rates))\n",
    "    rands = np.random.random((3,np.int(K)))\n",
    "    n_demes = np.where(L[:,0]!=K)[0][-1] +2\n",
    "    deme_seeds = np.random.randint(0,n_demes,(3,np.int(K)))\n",
    "    neighbs = np.append(np.expand_dims(deme_seeds[0,:],0),\n",
    "           np.expand_dims((((rands[0,:]<.5) & (deme_seeds[0,:]) !=0) | (deme_seeds[0,:] == (n_demes -1)) *1) *-2+1 +deme_seeds[0,:],0),axis=0).T\n",
    "\n",
    "    neighb_counts = np.bincount(neighbs.flatten(),\n",
    "                                #np.max(neighbs)\n",
    "                               )\n",
    "    mig_picks = np.zeros((np.int(K),2),dtype=np.int64)\n",
    "    cnt = 0\n",
    "    for i in np.unique(neighbs.flatten()):\n",
    "        to_ind = np.random.choice(np.repeat(alleles,L[i]),neighb_counts[i],replace=False)\n",
    "        #to_ind = np.repeat(alleles,L[i])[np.searchsorted(np.arange(0,1,1/(K-1)), rands[2,cnt (cnt+neighb_counts[i])],side=\"right\")]\n",
    "        inds = np.where(neighbs==i)\n",
    "        #mig_picks[np.where(neighbs==i)[0],:].take(np.where(neighbs==i)[1]+np.arange(0,len(np.where(neighbs==i)[1])*2,2)) = np.random.choice(np.repeat(alleles,L[i]),neighb_counts[i],replace=False)\n",
    "        for ind in range(len(inds[0])):\n",
    "            mig_picks[inds[0][ind],inds[1][ind]] = to_ind[ind] \n",
    "        cnt+=1    \n",
    "\n",
    "    for i in np.unique(neighbs.flatten()):\n",
    "        #L[i] \n",
    "        #L[i]+= neighbs[np.where(neighbs==i)[0],:].take(np.where(neighbs==i)[1]+np.arange(0,len(np.where(neighbs==i)[1])*2,2))\n",
    "        inds = np.where(neighbs==i)\n",
    "        L[i] -= true_bincount( mig_picks[inds[0],:].take(inds[1]+np.arange(0,len(inds[1])*2,2)),\n",
    "                                                          n_allele+1)\n",
    "        L[i] += true_bincount( mig_picks[inds[0],:].take((inds[1]==0)*1+np.arange(0,len(inds[1])*2,2)),\n",
    "                              n_allele+1) \n",
    "    dup_counts = np.bincount(deme_seeds[1,:],\n",
    "                               #np.max(deme_seeds[1,:])\n",
    "                              )\n",
    "    dup_picks = np.zeros((np.int(K),2),dtype=np.int64)\n",
    "\n",
    "    for i in np.unique(deme_seeds[1,:].flatten()):\n",
    "        dup_picks[np.where(deme_seeds[1,:]==i)] = np.random.choice(np.repeat(alleles,L[i]),(dup_counts[i],2),replace=False)\n",
    "\n",
    "    for i in np.unique(deme_seeds[1,:]):\n",
    "        dup_inds = np.where(deme_seeds[1,:]==i)\n",
    "        pairs =  dup_picks[np.where(deme_seeds[1,:]==i)].T\n",
    "        dup_bool =(P[:,pairs[1]].T.take(pairs[0])>rands[0].take(dup_inds[0]))\n",
    "        L[i] +=true_bincount(pairs[:,dup_bool].take(np.arange(len(pairs[:,dup_bool][0]))),n_allele+1) -  true_bincount(pairs[:,dup_bool].take(len(pairs[:,dup_bool][0])+np.arange(len(pairs[:,dup_bool][0]))) ,n_allele+1)\n",
    "   \n",
    "    mut_counts = np.bincount(deme_seeds[2,:], \n",
    "                               #np.max(deme_seeds[2,:])\n",
    "                              )\n",
    "    mut_picks = np.zeros(np.int(K),dtype=np.int64)\n",
    "\n",
    "    for i in np.unique(deme_seeds[2,:].flatten()):\n",
    "        mut_picks[np.where(deme_seeds[2,:]==i)] =np.random.choice(np.repeat(alleles,L[i]),(mut_counts[i]),replace=False)\n",
    "\n",
    "\n",
    "    mt_cnt = 0\n",
    "    for i in np.unique(deme_seeds[2,:]):\n",
    "\n",
    "\n",
    "        to_mut = mut_picks[np.where(deme_seeds[2,:]==i)]\n",
    "        mut_bool =(to_mut != 0 ) &(g_rates[to_mut] ==r ) & (mu>rands[1,:].take(np.where(deme_seeds[2,:]==i)[0]))\n",
    "\n",
    "\n",
    "        ##remove original cell and add mutated cell to cell counts\n",
    "        s_new = np.random.normal(r*alpha,.001,np.sum(mut_bool))\n",
    "        if s_new.size > 0:\n",
    "            for s in s_new:\n",
    "\n",
    "                g_rates = np.sort(np.append(g_rates,np.asarray(s)))\n",
    "                s_pos = np.where(g_rates==s)[0][0]\n",
    "                #print(s_pos)\n",
    "                L = np.concatenate((L[:,:(s_pos)].T, np.expand_dims(np.zeros(len(L),dtype=np.dtype( np.int64)),0), L[:,(s_pos):].T)).T\n",
    "                #L = np.concatenate((L[:,:(s_pos)].T,np.expand_dims(np.zeros(len(L)).astype(int),0),L[:,(s_pos):].T)).T \n",
    "\n",
    "\n",
    "\n",
    "\n",
    "                P = np.ones((len(g_rates),len(g_rates)))\n",
    "\n",
    "                P[0,:] = 1 - g_rates\n",
    "                #alleles = np.arange(n_allele+1)\n",
    "                L_empty = np.array([K]+[0]*(len(g_rates)-1))\n",
    "                L[i,1] -=1\n",
    "                L[i,s_pos] +=1\n",
    "                mt_cnt+=1\n",
    "    #shift = 0\n",
    "    #while L[0,0]<int(.02*K):\n",
    "    #    L=L[1:,:]\n",
    "    #    shift+=1\n",
    "\n",
    "    #for i in range(shift):\n",
    "    #    L=np.append(L,np.expand_dims(L_empty,0),axis=0)\n",
    "    return L, L_empty, g_rates, P,mt_cnt\n",
    "\n",
    "@njit\n",
    "def run_stepping_stone(n_gen,## nunmber of gnerations\n",
    "                K, ## population size\n",
    "                r,\n",
    "                alpha,## fitness landscape (Growthrates of each genotype (should be <<1))\n",
    "                mu,\n",
    "                L_init,prune):\n",
    "    \n",
    "\n",
    "\n",
    "    ##initialize probability matrix\n",
    "    L_empty = L_init[-1]\n",
    "    L = np.copy(L_init)\n",
    "    g_rates = np.array([0,r])\n",
    "    n_allele = len(g_rates)-1\n",
    "    P = np.ones((n_allele+1,n_allele+1))\n",
    "    P[0,:] = 1 - g_rates\n",
    "    ## list of allele number - pre-established so array doesnt have to be regenerated\n",
    "\n",
    "    #if track:\n",
    "    #L_history = []\n",
    "    #    L_history = [L]\n",
    "    mut_events=0\n",
    "    scount = 0\n",
    "    for t in range(n_gen):\n",
    "        L, L_empty, g_rates, P,new_muts =update(L,L_empty,P,K,g_rates,r,alpha,mu)\n",
    "        mut_events += new_muts\n",
    "        \n",
    "        if prune:\n",
    "            non_empty = np.sum(L,axis=0)!=0\n",
    "            L= L[:,non_empty]\n",
    "            L_empty = L_empty[non_empty]\n",
    "            g_rates = g_rates[non_empty]\n",
    "\n",
    "        \n",
    "        while L[0,0]<1:\n",
    "            L=L[1:,:]\n",
    "            L=np.append(L,np.expand_dims(L_empty,0),axis=0) \n",
    "            scount+=1\n",
    "\n",
    "         \n",
    "\n",
    "    #    if track:\n",
    "     #   L_history.append(L)\n",
    "        \n",
    "    #if track:\n",
    "    #    return L_history, g_rates\n",
    "    #else:\n",
    "    return  L, g_rates,scount\n",
    "\n",
    "@njit\n",
    "def fix_time_spatial(K, ## population size\n",
    "                     r,\n",
    "                     alpha,## fitness landscape (Growthrates of each genotype (should be <<1))\n",
    "                     mu,\n",
    "                     L_init,\n",
    "                     thresh,\n",
    "                     prune):  ## mutation rate\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "    L_empty = L_init[-1]\n",
    "    L = L_init\n",
    "    g_rates = np.array([0,r])\n",
    "    n_allele = len(g_rates)-1\n",
    "    P = np.ones((n_allele+1,n_allele+1))\n",
    "    P[0,:] = 1 - g_rates\n",
    "    \n",
    "    fixed=False\n",
    "    muts_check = False\n",
    "    del_check =False\n",
    "    del_fix = False\n",
    "    arise_time =0 \n",
    "    fixed=False\n",
    "    mut_events = 0\n",
    "    t = 0\n",
    "    \n",
    "    while not fixed:\n",
    "        L, L_empty, g_rates, P,new_muts =update(L,L_empty,P,K,g_rates,r,alpha,mu)\n",
    "        mut_events += new_muts\n",
    "        \n",
    "        if prune:\n",
    "            non_empty = np.sum(L,axis=0)!=0\n",
    "            L = L[:,non_empty]\n",
    "            L_empty = L_empty[non_empty]\n",
    "            g_rates = g_rates[non_empty]\n",
    "        \n",
    "\n",
    "        while L[0,0]<1:\n",
    "            L=L[1:,:]\n",
    "            L=np.append(L,np.expand_dims(L_empty,0),axis=0)\n",
    "            \n",
    "        if len(g_rates)>2 ==True and not muts_check:\n",
    "            ## record time\n",
    "            arise_time = t\n",
    "            muts_check = True\n",
    "        if not len(g_rates)>2:\n",
    "            muts_check = False\n",
    "            arise_time = 0\n",
    "\n",
    "        ## check if fixed\n",
    "        n_demes = np.where(L[:,0]!=K)[0][-1] +2\n",
    "        wt_ind = np.where(g_rates==r)[0][0]\n",
    "        #fix_bools = L[:(n_demes-2),wt_ind] < np.asarray(thresh*np.sum(L[:(n_demes-2),1:],axis=1),dtype=np.dtype('int64'))\n",
    "        fixed = np.all((L[L[:,0]!=K,wt_ind])/(K-L[L[:,0]!=K,0]) < thresh)\n",
    "        #fixed = np.all(fix_bools)\n",
    "        #fixed = np.sum(L[:,1:n_allele])<(thresh*init_pop)\n",
    "\n",
    "        t+=1\n",
    "\n",
    "\n",
    "    return L, g_rates,t,arise_time, mut_events"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [],
   "source": [
    "K= 5000\n",
    "n_gen=10000\n",
    "r=.1\n",
    "alpha=0\n",
    "mu=0\n",
    "L_init = initialize(K,1,mu)[0]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [],
   "source": [
    "L_empty = L_init[-1]\n",
    "L = np.copy(L_init)\n",
    "g_rates = np.array([0,r])\n",
    "n_allele = len(g_rates)-1\n",
    "P = np.ones((n_allele+1,n_allele+1))\n",
    "P[0,:] = 1 - g_rates\n",
    "## list of allele number - pre-established so array doesnt have to be regenerated\n",
    "\n",
    "#if track:\n",
    "#L_history = []\n",
    "#    L_history = [L]\n",
    "mut_events=0\n",
    "scount = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(n_gen):\n",
    "    L, L_empty, g_rates, P,new_muts =update(L,L_empty,P,K,g_rates,r,alpha,mu)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [],
   "source": [
    "dist = np.where(L[:,0]==K)[0][0] - np.where(L_init[:,0]==K)[0][0]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0037"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dist/(n_gen)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [],
   "source": [
    "K= 10000\n",
    "n_gen=4000\n",
    "r=.1\n",
    "alpha=0\n",
    "mu=0\n",
    "L_init = initialize(K,1,mu)[0]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [],
   "source": [
    "L_empty = L_init[-1]\n",
    "L = np.copy(L_init)\n",
    "g_rates = np.array([0,r])\n",
    "n_allele = len(g_rates)-1\n",
    "P = np.ones((n_allele+1,n_allele+1))\n",
    "P[0,:] = 1 - g_rates\n",
    "## list of allele number - pre-established so array doesnt have to be regenerated\n",
    "\n",
    "#if track:\n",
    "#L_history = []\n",
    "#    L_history = [L]\n",
    "mut_events=0\n",
    "scount = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(n_gen):\n",
    "    L, L_empty, g_rates, P,new_muts =update(L,L_empty,P,K,g_rates,r,alpha,mu)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [],
   "source": [
    "dist = np.where(L[:,0]==K)[0][0] - np.where(L_init[:,0]==K)[0][0]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "18"
      ]
     },
     "execution_count": 148,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6324555320336759"
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(2*.1**.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5.692099788303083"
      ]
     },
     "execution_count": 155,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(60-51)* .1**.5 *2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.1"
      ]
     },
     "execution_count": 146,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10.0"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100/10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.4699488491048593"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "2299/1564"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "100.0"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "1000*.1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 10.9 s, sys: 10 s, total: 21 s\n",
      "Wall time: 21.9 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "K= 5000\n",
    "\n",
    "r=.1\n",
    "alpha=5\n",
    "mu=.01\n",
    "n_gen =100\n",
    "thresh=3/K\n",
    "L_init = initialize(K,1,mu)[0]\n",
    "L,g=run_stepping_stone(n_gen,K,r,alpha,mu,L_init,True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 27.2 s, sys: 30.8 s, total: 58 s\n",
      "Wall time: 1min 6s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "K= 5000\n",
    "\n",
    "r=.1\n",
    "alpha=5\n",
    "mu=.01\n",
    "n_gen =100\n",
    "thresh=3/K\n",
    "L_init = initialize(K,1,mu)[0]\n",
    "L,g=run_stepping_stone(n_gen,K,r,alpha,mu,L_init,False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([0, 1, 2]),)"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "non_extinct"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 50.2 s, sys: 1.05 s, total: 51.3 s\n",
      "Wall time: 1min 4s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "K= 100\n",
    "\n",
    "r=.1\n",
    "alpha=2\n",
    "mu=.0001\n",
    "n_gen =10000\n",
    "thresh=3/K\n",
    "L_init = initialize(K,1,mu)[0]\n",
    "L, g_rates,t,arise_time, mut_events=fix_time_spatial(K,r,alpha,mu,L_init,.2,True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.all((L[L[:,0]!=K,1])/(K-L[L[:,0]!=K,0]) < .2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([12,  7,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n",
       "        0,  0])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "L[L[:,0]!=K,1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 98,  97,  97, 100,  89,  90,  94,  80,  73,  70,  58,  42,  45,\n",
       "        34,  20,  15,   9,  12,   4])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(K-L[L[:,0]!=K,0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [],
   "source": [
    "K= 100\n",
    "r=.1\n",
    "alpha=2\n",
    "mu=.1\n",
    "n_gen =100\n",
    "n_allele =1\n",
    "L_init = initialize(K,1,mu)[0]\n",
    "\n",
    "##initialize probability matrix\n",
    "#L = L_init\n",
    "L_empty = np.array([K]+[0]*n_allele)\n",
    "L=L_init\n",
    "P = np.ones((n_allele+1,n_allele+1))\n",
    "P[0,1:] = [r*alpha]\n",
    "\n",
    "L_empty = L_init[-1]\n",
    "L = L_init\n",
    "g_rates = np.array([0,r])\n",
    "n_allele = len(g_rates)-1\n",
    "P = np.ones((n_allele+1,n_allele+1))\n",
    "P[0,:] = 1 - g_rates\n",
    "## list of allele number - pre-established so array doesnt have to be regenerated\n",
    "alleles = np.arange(n_allele+1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/nikhilkrishnan/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:1: RuntimeWarning: divide by zero encountered in true_divide\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x152a910b70>]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(1/np.arange(90)**2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [],
   "source": [
    "for dt in range(100):\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n"
     ]
    }
   ],
   "source": [
    "mu = .8\n",
    "g_rates = np.array([0,.1])\n",
    "for i in np.unique(deme_seeds[2,:]):\n",
    "    to_mut = mut_picks[np.where(deme_seeds[2,:]==i)]\n",
    "    mut_bool =(to_mut != 0 ) &(g_rates[to_mut] ==r ) & (mu>rands[1,:].take(np.where(deme_seeds[2,:]==i)[0]))\n",
    "    if np.sum(mut_bool) > 0:\n",
    "        print(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ True,  True,  True,  True,  True,  True])"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.array([0,.1])[to_mut] ==r"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([False, False, False, False, False, False])"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "i= 8\n",
    "to_mut = mut_picks[np.where(deme_seeds[2,:]==i)]\n",
    "(to_mut != 0 )\n",
    "to_mut != n_allele "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([], dtype=float64)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.random.normal(r*alpha,.001,len(mut_bool))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([False, False, False, False, False, False])"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(to_mut != 0 ) &(to_mut != n_allele ) & (mu>rands[1,:].take(np.where(deme_seeds[2,:]==i)[0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from numpy.random import choice\n",
    "import random\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.integrate import odeint \n",
    "from numba import jit,njit\n",
    "##standing wave solution of Fisher wave\n",
    "\n",
    "\n",
    "def standing_wave(y0,x,D,rw):\n",
    "    w = y0[0]      ##initial value for wave profile at x =0, i.e. w(x=0)\n",
    "    z = y0[1]      ##initial value for rate of change of profile w.r.t. position x , at x=0 i.e. dw/dx(x=0)\n",
    "    dwdx = z\n",
    "    dzdx =(-2*((rw*D)**.5)*dwdx -w*rw*(1-w))/D ## fisher equation in comoving frame\n",
    "    \n",
    "    return [dwdx,dzdx]\n",
    "\n",
    "\n",
    "def initialize(K,n_allele,mu):\n",
    "    ## generate standing wave\n",
    "    stand = odeint(standing_wave,[1,-(2*2**.5)/K],np.arange(70),args=(2*2**.5,1))[:,0]\n",
    "    \n",
    "    ## cuttoff non integer cell density based off of carry capacity K\n",
    "    w_0 = (K*stand).astype(int)\n",
    "    w_0 = w_0[w_0>1]\n",
    "    \n",
    "    ## subtract wild type cells from carrying capacity to get 'emopty' particle count\n",
    "    L = np.vstack(((K-w_0),w_0)).T\n",
    "    L = np.append(L,np.zeros((len(w_0),n_allele-1)),axis=1)\n",
    "\n",
    "    ##array strucutre of an empty deme to be added on as needed \n",
    "    L_empty= np.append([K],np.zeros(n_allele,dtype=int))\n",
    "\n",
    "    ## add on some number of empty demes\n",
    "    for i in range(500):\n",
    "        L= np.append(L,[L_empty],axis=0)\n",
    "        \n",
    "    return L.astype(int), L_empty\n",
    "\n",
    "\n",
    "\n",
    "## given  ab array with counts and an array withprobabilities return index from first array\n",
    "# faster than np.random.choice for smallish arrays\n",
    "@njit\n",
    "def choice(options,probs):\n",
    "    x = np.random.rand()\n",
    "    cum = 0\n",
    "    for i,p in enumerate(probs):\n",
    "        cum += p\n",
    "        ##sum of probability must be 1\n",
    "        if x < cum:\n",
    "            break\n",
    "    return options[i]\n",
    "\n",
    "\n",
    "@njit\n",
    "def run_stepping_stone(n_gen,## nunmber of gnerations\n",
    "                K, ## population size\n",
    "                r,\n",
    "                alpha,## fitness landscape (Growthrates of each genotype (should be <<1))\n",
    "                mu,\n",
    "                L_init,\n",
    "                L_history):  ## mutation rate\n",
    "    \n",
    "\n",
    "    ##initialize probability matrix\n",
    "    #L = L_init\n",
    "    L_empty = L_init[-1]\n",
    "    L=L_init\n",
    "    g_rates = np.array([0,r])\n",
    "    n_allele = len(g_rates)-1\n",
    "    P = np.ones((n_allele+1,n_allele+1))\n",
    "    P[0,:] = 1 - g_rates\n",
    "    \n",
    "    ## list of allele number - pre-established so array doesnt have to be regenerated\n",
    "    alleles = np.arange(n_allele+1)\n",
    "    \n",
    "    #slots for picked alleles each iteration to be stored, so array doesnt havent to be regerated each time\n",
    "    picks = np.array([0,0,0,0])\n",
    "    \n",
    "    #sstore trace history\n",
    "    #L_history= np.expand_dims(L,0)\n",
    "\n",
    "    #for i in range(n_gen-1):\n",
    "    #    L_history = np.concatenate((L_history, np.expand_dims(np.zeros(L.shape),0)))\n",
    "\n",
    "   \n",
    "    for t in range(n_gen):\n",
    "        for dt in range(K):\n",
    "            \n",
    "            #number of demes with a non empty particle (+2)\n",
    "            n_demes = np.where(L[:,0]!=K)[0][-1] +2\n",
    "\n",
    "            #pick adjacent demes tobe swapped, pick demes for duplication and mutation\n",
    "            ind_1 = np.random.randint(0, n_demes)\n",
    "            if (np.random.random() < .5 and ind_1 != 0) or ind_1 == n_demes - 1:\n",
    "                ind_2 = ind_1 - 1\n",
    "            else:\n",
    "                ind_2 = ind_1 + 1\n",
    "            neighb = np.array([ind_1, ind_2])\n",
    "            dup_deme, mut_deme = np.random.randint(0,n_demes,2)\n",
    "\n",
    "\n",
    "            #dmigration: pick two cells from each of the selected demes, and swap them\n",
    "            for i in range(2):\n",
    "                picks[i] = choice(alleles, L[neighb][i]/K)\n",
    "                \n",
    "            for inds in [[0,1],[1,0]]:\n",
    "                L[neighb[inds[0]],picks[inds[0]]] -= 1\n",
    "                L[neighb[inds[0]],picks[inds[1]]] += 1\n",
    "\n",
    "\n",
    "            #duplication: pick two cells from the selected deme and echange first with copy of second according to\n",
    "            #3 probability matrix\n",
    "            for i in range(2,4):\n",
    "                picks[i] = choice(alleles,L[dup_deme]/K)\n",
    "\n",
    "            if P[picks[2],picks[3]] > np.random.random():\n",
    "                L[dup_deme,picks[2]] += 1\n",
    "                L[dup_deme,picks[3]] -= 1\n",
    "\n",
    "\n",
    "\n",
    "            ##mutation\n",
    "            mut_deme = np.random.randint(n_demes)\n",
    "            #picks[4] = choice(alleles,L[mut_deme]/K)\n",
    "            #picks.append(choice(alleles,L[mut_deme]/K))\n",
    "            if mu>np.random.random():\n",
    "                #3 only particles that are not empty spaces and are not the 'peak' in the landscape strucutre can mutate\n",
    "                #if picks[4] != n_allele and picks[4] != 0:\n",
    "                    ## mutate cell and fromat in terms of cell counts i.e. [empty cell count,...,chosen cell count]\n",
    "\n",
    "                ##remove original cell and add mutated cell to cell counts\n",
    "                s_new = np.random.normal(r*alpha,.001)\n",
    "                g_rates = np.sort(np.append(g_rates,np.asarray(s_new)))\n",
    "                s_pos = np.where(g_rates==s_new)[0][0]\n",
    "                #print(s_pos)\n",
    "                L = np.concatenate((L[:,:(s_pos)].T, np.expand_dims(np.zeros(len(L),dtype=np.dtype( np.int64)),0), L[:,(s_pos):].T)).T\n",
    "                #L = np.concatenate((L[:,:(s_pos)].T,np.expand_dims(np.zeros(len(L)).astype(int),0),L[:,(s_pos):].T)).T \n",
    "                \n",
    "\n",
    "                n_allele = len(g_rates)-1\n",
    "\n",
    "                P = np.ones((n_allele+1,n_allele+1))\n",
    "                \n",
    "                P[0,:] = 1 - g_rates\n",
    "                alleles = np.arange(n_allele+1)\n",
    "                L_empty = np.array([K]+[0]*n_allele)\n",
    "                L[mut_deme,1] -=1\n",
    "                L[mut_deme,s_pos] +=1\n",
    "\n",
    "            ##track how many demes are to be omitted\n",
    "            shift = 0\n",
    "            while L[0,0]<int(.02*K):\n",
    "                L=L[1:,:]\n",
    "                shift+=1\n",
    "            #if L[0,0]<int(.02*K):\n",
    "            #    shift = np.where(L[:,0]<int(.02*K))[-1][0]\n",
    "            #    L = L[shift:,:]\n",
    "            for i in range(shift):\n",
    "                L=np.append(L,np.expand_dims(L_empty,0),axis=0)\n",
    "\n",
    "\n",
    "        #L_history = np.concatenate((L_history, np.expand_dims(L,0)),axis=0)\n",
    "        #L_history[t] = L\n",
    "    return L,g_rates\n",
    "\n",
    "\n",
    "@njit\n",
    "def fix_time_spatial(K, ## population size\n",
    "                     r,\n",
    "                     alpha,## fitness landscape (Growthrates of each genotype (should be <<1))\n",
    "                     mu,\n",
    "                     L_init,\n",
    "                     thresh):  ## mutation rate\n",
    "    \n",
    "\n",
    "    ##initialize probability matrix\n",
    "    #L = L_init\n",
    "    L_empty = L_init[-1]\n",
    "    L=L_init\n",
    "    g_rates = np.array([0,r])\n",
    "    n_allele = len(g_rates)-1\n",
    "    P = np.ones((n_allele+1,n_allele+1))\n",
    "    P[0,:] = 1 - g_rates\n",
    "    \n",
    "    ## list of allele number - pre-established so array doesnt have to be regenerated\n",
    "    alleles = np.arange(n_allele+1)\n",
    "    \n",
    "    #slots for picked alleles each iteration to be stored, so array doesnt havent to be regerated each time\n",
    "    picks = np.array([0,0,0,0])\n",
    "    \n",
    "    #sstore trace history\n",
    "    #L_history= np.expand_dims(L,0)\n",
    "\n",
    "    #for i in range(n_gen-1):\n",
    "    #    L_history = np.concatenate((L_history, np.expand_dims(np.zeros(L.shape),0)))\n",
    "\n",
    "    fixed=False\n",
    "    muts_check = False\n",
    "    del_check =False\n",
    "    del_fix = False\n",
    "    arise_time =0 \n",
    "    t = 0\n",
    "\n",
    "    while not fixed:\n",
    "        \n",
    "        #number of demes with a non empty particle (+2)\n",
    "        n_demes = np.where(L[:,0]!=K)[0][-1] +2\n",
    "\n",
    "        #pick adjacent demes tobe swapped, pick demes for duplication and mutation\n",
    "        ind_1 = np.random.randint(0, n_demes)\n",
    "        if (np.random.random() < .5 and ind_1 != 0) or ind_1 == n_demes - 1:\n",
    "            ind_2 = ind_1 - 1\n",
    "        else:\n",
    "            ind_2 = ind_1 + 1\n",
    "        neighb = np.array([ind_1, ind_2])\n",
    "        dup_deme, mut_deme = np.random.randint(0,n_demes,2)\n",
    "\n",
    "\n",
    "        #dmigration: pick two cells from each of the selected demes, and swap them\n",
    "        for i in range(2):\n",
    "            picks[i] = choice(alleles, L[neighb][i]/K)\n",
    "\n",
    "        for inds in [[0,1],[1,0]]:\n",
    "            L[neighb[inds[0]],picks[inds[0]]] -= 1\n",
    "            L[neighb[inds[0]],picks[inds[1]]] += 1\n",
    "\n",
    "\n",
    "        #duplication: pick two cells from the selected deme and echange first with copy of second according to\n",
    "        #3 probability matrix\n",
    "        for i in range(2,4):\n",
    "            picks[i] = choice(alleles,L[dup_deme]/K)\n",
    "\n",
    "        if P[picks[2],picks[3]] > np.random.random():\n",
    "            L[dup_deme,picks[2]] += 1\n",
    "            L[dup_deme,picks[3]] -= 1\n",
    "\n",
    "\n",
    "\n",
    "        ##mutation\n",
    "        mut_deme = np.random.randint(n_demes)\n",
    "        #picks[4] = choice(alleles,L[mut_deme]/K)\n",
    "        #picks.append(choice(alleles,L[mut_deme]/K))\n",
    "        if mu>np.random.random() and L[mut_deme,1]>0:\n",
    "            #3 only particles that are not empty spaces and are not the 'peak' in the landscape strucutre can mutate\n",
    "            #if picks[4] != n_allele and picks[4] != 0:\n",
    "                ## mutate cell and fromat in terms of cell counts i.e. [empty cell count,...,chosen cell count]\n",
    "\n",
    "            ##remove original cell and add mutated cell to cell counts\n",
    "            s_new = np.random.normal(r*alpha,.001)\n",
    "            g_rates = np.sort(np.append(g_rates,np.asarray(s_new)))\n",
    "            s_pos = np.where(g_rates==s_new)[0][0]\n",
    "            #print(s_pos)\n",
    "            L = np.concatenate((L[:,:(s_pos)].T, np.expand_dims(np.zeros(len(L),dtype=np.dtype( np.int64)),0), L[:,(s_pos):].T)).T\n",
    "            #L = np.concatenate((L[:,:(s_pos)].T,np.expand_dims(np.zeros(len(L)).astype(int),0),L[:,(s_pos):].T)).T \n",
    "\n",
    "\n",
    "            n_allele = len(g_rates)-1\n",
    "\n",
    "            P = np.ones((n_allele+1,n_allele+1))\n",
    "\n",
    "            P[0,:] = 1 - g_rates\n",
    "            alleles = np.arange(n_allele+1)\n",
    "            L_empty = np.array([K]+[0]*n_allele)\n",
    "            L[mut_deme,1] -=1\n",
    "            L[mut_deme,s_pos] +=1\n",
    "\n",
    "        ##track how many demes are to be omitted\n",
    "        shift = 0\n",
    "        while L[0,0]<int(.02*K):\n",
    "            L=L[1:,:]\n",
    "            shift+=1\n",
    "        #if L[0,0]<int(.02*K):\n",
    "        #    shift = np.where(L[:,0]<int(.02*K))[-1][0]\n",
    "        #    L = L[shift:,:]\n",
    "        for i in range(shift):\n",
    "            L=np.append(L,np.expand_dims(L_empty,0),axis=0)\n",
    "\n",
    "        ## check if fixed\n",
    "        wt_ind = np.where(g_rates==r)[0][0]\n",
    "        fix_bools = L[:(n_demes-2),wt_ind] < np.asarray(thresh*np.sum(L[:(n_demes-2),1:],axis=1),dtype=np.dtype('int64'))\n",
    "        fixed = np.all(fix_bools)\n",
    "        t+=1\n",
    "        #L_history = np.concatenate((L_history, np.expand_dims(L,0)),axis=0)\n",
    "        #L_history[t] = L\n",
    "    return L,g_rates\n",
    "\n",
    "\n",
    "## run simulation until a fixation event occurs (fixation to some threshold 'thresh')\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "#Run the automaton\n",
    "#Implements cell division. The division rates are based on the experimental data\n",
    "\n",
    "\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "fixed = L[:,wt_ind] < np.asarray(thresh*np.sum(L[:,1:],axis=1),dtype=np.dtype('int64'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "K= 100\n",
    "\n",
    "r=.1\n",
    "alpha=5\n",
    "mu=.0001\n",
    "n_gen =10000\n",
    "thresh=3/K\n",
    "L_init = initialize(K,1,mu)[0]\n",
    "L,g=run_stepping_stone(n_gen,K,r,alpha,mu,L_init,np.zeros((n_gen,len(L_init),2)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 6.24 s, sys: 1.08 s, total: 7.32 s\n",
      "Wall time: 7.46 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "K= 100\n",
    "r=.1\n",
    "alpha=2\n",
    "mu=.01\n",
    "n_gen =100\n",
    "L_init = initialize(K,1,mu)[0]\n",
    "L,g=fix_time_spatial(K,r,alpha,mu,L_init,.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%time\n",
    "K= 5000\n",
    "r=.1\n",
    "alpha=2\n",
    "mu=.0001\n",
    "n_gen =100\n",
    "L_init = initialize(K,1,mu)[0]\n",
    "L,g=fix_time_spatial(K,r,alpha,mu,L_init,.05)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[  6,   0,   0, ...,   0,   0,   0],\n",
       "       [  4,   0,   0, ...,   0,   0,   0],\n",
       "       [  9,   0,   0, ...,   0,   0,   0],\n",
       "       ...,\n",
       "       [100,   0,   0, ...,   0,   0,   0],\n",
       "       [100,   0,   0, ...,   0,   0,   0],\n",
       "       [100,   0,   0, ...,   0,   0,   0]])"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "L"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sum(L[:,1:]>0,axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "K=100\n",
    "mu=.01\n",
    "L_init = initialize(K,5,mu)[0]\n",
    "L_init.shape\n",
    "\n",
    "@njit\n",
    "def check(L,s_pos):\n",
    "    #return np.vstack((np.zeros(5)))\n",
    "    return np.array([s_pos]+[0]*s_pos)\n",
    "\n",
    "    #return np.concatenate((L[:,:(s_pos)].T, np.expand_dims(np.zeros(len(L),dtype=np.dtype( np.int64)),0), L[:,(s_pos):].T)).T\n",
    "    #return np.vstack(np.expand_dims(np.zeros(len(L)),0))\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([3, 0, 0, 0])"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "check(L_init,3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([  0, 100,   0,   0,   0,   0])"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "L_init[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "##standing wave solution of Fisher wave\n",
    "def standing_wave(y0,x,D,rw):\n",
    "    w = y0[0]      ##initial value for wave profile at x =0, i.e. w(x=0)\n",
    "    z = y0[1]      ##initial value for rate of change of profile w.r.t. position x , at x=0 i.e. dw/dx(x=0)\n",
    "    dwdx = z\n",
    "    dzdx =(-2*((rw*D)**.5)*dwdx -w*rw*(1-w))/D\n",
    "    \n",
    "    return [dwdx,dzdx]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([200, 198, 197, 196, 195, 194, 192, 190, 188, 185, 181, 176, 170,\n",
       "       163, 155, 145, 134, 122, 108,  93,  79,  65,  51,  39,  29,  21,\n",
       "        15,  10,   7,   4,   2,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0])"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sum(L_init[:,1:],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 578,
   "metadata": {},
   "outputs": [],
   "source": [
    "def fit_dist(r,alpha,dist_key):\n",
    "    dist_dict = {'exponential':np.random.exponential,\n",
    "                 'gamma':np.random.gamma,\n",
    "                 'normal':np.random.normal}\n",
    "    func = dist_dict[dist_key]\n",
    "    s_bar  = r*func(alpha)\n",
    "    return s_bar\n",
    "\n",
    "##standing wave solution of Fisher wave\n",
    "def standing_wave(y0,x,D,rw):\n",
    "    w = y0[0]      ##initial value for wave profile at x =0, i.e. w(x=0)\n",
    "    z = y0[1]      ##initial value for rate of change of profile w.r.t. position x , at x=0 i.e. dw/dx(x=0)\n",
    "    dwdx = z\n",
    "    dzdx =(-2*((rw*D)**.5)*dwdx -w*rw*(1-w))/D\n",
    "    \n",
    "    return [dwdx,dzdx]\n",
    "\n",
    "\n",
    "###given a list of demes (indexes), pick two neighobiring ones at random\n",
    "def rand_neighbors(demes):\n",
    "    ind_1 = np.random.choice(demes)\n",
    "    left = demes[:ind_1][-1:]\n",
    "    right = demes[ind_1:][1:2]\n",
    "    neighb = np.append(left,right).flatten()\n",
    "    ind_2=choice(neighb)\n",
    "    neigh = [ind_1,ind_2]\n",
    "    neigh.sort()\n",
    "    return np.array(neigh)\n",
    "\n",
    "## covert a list of cell counts for each particle type to an array of \n",
    "#all particles represented with their type represented by an itenged\n",
    "def counts_to_cells(counts,n_allele):\n",
    "    cells = np.unique(cells,return_counts=True)\n",
    "    return cells\n",
    "\n",
    "## covert an array of all cells and their type to a list of counts for each cell type \n",
    "def cells_to_counts(cell_types,g_rates):\n",
    "    g_r = np.unique(cell_types,return_counts=True)[0]\n",
    "    raw_counts = np.unique(cell_types,return_counts=True)[1]\n",
    "    cell_counts = []\n",
    "    for i in g_rates:\n",
    "        if any(g_r == i):\n",
    "            cell_counts.append(raw_counts[np.where(g_r == i)[0][0]])\n",
    "        else:\n",
    "            cell_counts.append(0)\n",
    "    cell_counts = np.array(cell_counts)\n",
    "\n",
    "    return cell_counts\n",
    "    \n",
    "    \n",
    "## from a list 2d array of the cell list from two neighboring demes\n",
    "##pick two cells to be swapped at random and return resulting cell list\n",
    "def migration(cell_counts,g_rates,K,r):\n",
    "    picks = []\n",
    "    cell_types = [] \n",
    "    for i in [0,1]:\n",
    "        pick_ind=choice(np.arange(K))\n",
    "        picks.append(np.arange(K) == pick_ind)\n",
    "        cell_types.append(np.repeat( g_rates, cell_counts[i].astype(int)))\n",
    "    picks = np.array(picks)\n",
    "    keep =  ~np.array(picks)\n",
    "    \n",
    "\n",
    "\n",
    "    cell_types[0]= np.append(cell_types[0][keep[0]], [cell_types[1][picks[1]]])\n",
    "    cell_types[1]= np.append(cell_types[1][keep[1]], [cell_types[0][picks[0]]])\n",
    "    return np.array(cell_types)\n",
    "\n",
    "## from the cell list from the chosen d0eme\n",
    "##pick *-\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n",
    "#wo cells and replace one with a duplicate of the other according\n",
    "##to transition matrix\n",
    "def duplication(cell_counts,g_rates,K,r):\n",
    "    pick_ind=choice(np.arange(K),2,replace= False)\n",
    "    cell_types = np.repeat(g_rates, cell_counts.astype(int))\n",
    "    picks = np.array([np.arange(K) == pick_ind[i] for i in [0,1]])\n",
    "    r= np.random.random()\n",
    "    P=prob_mat(g_rates)\n",
    "    #print(cell_types)\n",
    "    if P[tuple([np.where(cell_types[ind] == g_rates)[0] for ind in pick_ind])]> r:\n",
    "        cell_types[pick_ind[1]] =cell_types[pick_ind[0]]\n",
    "    return cell_types\n",
    "    \n",
    " ## from the cell list from the chosen deme\n",
    "##pick a cell and mutate it with probability according to mutation rate\n",
    "def mutation(mu,alpha,dist_key, cell_counts,g_rates,K,r):\n",
    "\n",
    "    cell_types = np.repeat(g_rates,cell_counts.astype(int))\n",
    "    pick_ind=choice(np.arange(K))\n",
    "    p= np.random.random()\n",
    "    s_pos=0\n",
    "    if mu>p:\n",
    "        if cell_types[pick_ind] == r :\n",
    "            s_new = fit_dist(r,alpha,dist_key)\n",
    "            cell_types[pick_ind] = s_new\n",
    "            g_rates = np.sort(np.append(g_rates,[cell_types[pick_ind]]))\n",
    "            s_pos = np.where(g_rates==s_new)[0][0]\n",
    "    return cell_types, g_rates,s_pos\n",
    "\n",
    "## perform stepping stone alogrithm (migration, duplication, mutation) for each step\n",
    "## and return new simulation box, recenter\n",
    "\n",
    "def recenter(L, g_rates, K):\n",
    "    shift = 0\n",
    "    L_empty= np.append([K],np.zeros(len(g_rates)-1,dtype=float))\n",
    "    while L[0,0]<int(.02*K):\n",
    "        L=L[1:,:]\n",
    "        shift+=1\n",
    "    for i in range(shift):\n",
    "        L=np.append(L,[L_empty],axis=0)\n",
    "    return L\n",
    "\n",
    "\n",
    "def update(L,g_rates,dist_key,K,r,alpha,mu):\n",
    "    #demes = np.arange(len(L))\n",
    "    L_tip = np.where(L[:,0]!=K)[0][-1]\n",
    "    demes = np.arange(L_tip+2)\n",
    "    #migration\n",
    "    neighbors = rand_neighbors(demes)\n",
    "    cells = migration(L[neighbors],g_rates,K,r)\n",
    "    counts = [cells_to_counts(cell,g_rates) for cell in cells]\n",
    "    L[neighbors] = np.array(counts)\n",
    "\n",
    "    #duplication\n",
    "    dup_deme = choice(demes)\n",
    "    cells = duplication(L[dup_deme],g_rates,K,r)\n",
    "    counts = cells_to_counts(cells,g_rates)\n",
    "    L[dup_deme] = counts\n",
    "\n",
    "    ##mutation\n",
    "    mut_deme = choice(demes)\n",
    "    cells, g_rates,s_pos = mutation(mu,alpha,dist_key, L[mut_deme],g_rates,K,r)\n",
    "    counts = cells_to_counts(cells,g_rates)\n",
    "    for i in range(len(g_rates)-len(L[0])):\n",
    "        L = np.append(np.append(L[:,:(s_pos)],\n",
    "                                np.vstack(np.zeros(len(L))),axis=1),L[:,(s_pos):],axis=1)\n",
    "        #print(counts)\n",
    "        #print(L[mut_deme])\n",
    "        #print(L)\n",
    "    L[mut_deme]=counts\n",
    "        \n",
    "    return L,g_rates\n",
    "\n",
    "\n",
    "def initialize(K,r,alpha,mu):\n",
    "    stand = odeint(standing_wave,[1,-(2*2**.5)/K],np.arange(70),args=(2*2**.5,1))[:,0]\n",
    "    w_0 = (K*stand).astype(int)\n",
    "    w_0 = w_0[w_0>1]\n",
    "    L = np.vstack(((K-w_0),w_0)).T\n",
    "    g_rates = np.array([0,r])\n",
    "\n",
    "    ##initialize array\n",
    "    L_empty= np.append([K],np.zeros(len(g_rates)-1))\n",
    "\n",
    "    for i in range(70):\n",
    "        L= np.append(L,[L_empty],axis=0)\n",
    "    return L.astype(int), g_rates\n",
    "\n",
    "def prob_mat(g_rates):\n",
    "    P = np.ones((len(g_rates),len(g_rates)))\n",
    "    P[0,:] = 1-g_rates\n",
    "    return P \n",
    "\n",
    "def prune(L,g_rates):\n",
    "    \n",
    "    full_bools = np.where(np.sum(L,axis=0)!=0)[0][-1]\n",
    "    L=L[:,:full_bools]\n",
    "    g_rates = g_rates[:full_bools]\n",
    "    return L,g_rates\n",
    "\n",
    "## run one dimensional stepping stone for a given number of possible beneficil mutations, and generations   \n",
    "def run_stepping_stone(n_gen,K,r,alpha,mu,dist_key = 'exponential'):\n",
    "    func_args = [K,r,alpha,mu]\n",
    "    ##initialize probability matrix\n",
    "    c = 1\n",
    "    move=10\n",
    "    L, g_rates = initialize(*func_args)\n",
    "    L_history=[L]\n",
    "    #begin evolution\n",
    "    count = 0\n",
    "    for t in range(n_gen):\n",
    "        for dt in range(K):\n",
    "            L,g_rates = update(L,g_rates,dist_key,*func_args)\n",
    "            \n",
    "            L= recenter(L,g_rates,K)\n",
    "        \n",
    "        #L,g_rates =prune(L,g_rates)\n",
    "        L_history.append(L)\n",
    "        \n",
    "\n",
    "        count+=1\n",
    "    return L_history, g_rates\n",
    "\n",
    "\n",
    "## run a two allele 1d stepping stone simulation, recording mutant establishment and fixation along simulation box\n",
    "def fix_time(K,r,alpha,mu,thresh,dist_key , track):\n",
    "    func_args = [K,r,alpha,mu]\n",
    "    ##initialize probability matrix\n",
    "    c = 1\n",
    "    move=10\n",
    "    L, g_rates = initialize(*func_args)\n",
    "    L_history=[L]\n",
    "    #begin evolution\n",
    "    count = 0\n",
    "    #begin evolution\n",
    "    fixed=False\n",
    "    t = 0\n",
    "\n",
    "    fix_times = np.zeros(len(L))\n",
    "    est_times = np.zeros(len(L))\n",
    "    fb_1, eb_1 = (np.zeros(len(L)) == 1),(np.zeros(len(L)) == 1) \n",
    "    while not fixed:\n",
    "        L,g_rates = update(L,g_rates,dist_key,*func_args)\n",
    "        L= recenter(L,g_rates,K)\n",
    "        wt_ind = np.where(g_rates==r)[0][0]\n",
    "        fix_bools = L[:,wt_ind] < int(thresh*K)\n",
    "        #est_bools = L[:,2] > int(1/(r*alpha))\n",
    "        fixed= all(fix_bools)\n",
    "\n",
    "        fix_times  = [max(i,time) for i, time in zip((fix_bools^fb_1)*t,fix_times)]\n",
    "            #est_times  = [max(i,time) for i, time in zip((est_bools^eb_1)*t,est_times)]\n",
    "        fb_1= fix_bools\n",
    "        t+=1\n",
    "    return L,fix_times,g_rates\n",
    "\n",
    "      \n",
    "\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "K= 200\n",
    "\n",
    "r=.1\n",
    "alpha=2\n",
    "mu=.001\n",
    "\n",
    "thresh=3/K\n",
    "\n",
    "L,g=run_stepping_stone(5000,K,r,alpha,mu,dist_key = 'normal')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "K= 200\n",
    "\n",
    "r=.1\n",
    "alpha=2\n",
    "mu=.001\n",
    "\n",
    "thresh=3/K\n",
    "\n",
    "L,times=fix_time(K,r,alpha,mu,thresh,dist_key = 'normal')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "trace = L[1500]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(101, 16)"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "L[1500][:,inds].shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "inds = np.where(np.sum(L[1500],axis=0)!=0)[0]\n",
    "trace = L[1500][:,inds]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "rng=45\n",
    "fig,ax =plt.subplots(figsize=(12,4))\n",
    "\n",
    "\n",
    "\n",
    "colors = ['darkblue','darkred','salmon','darkgrey','blue','teal','red','silver',\n",
    "          'pink','orange','grey','purple','lightblue','magenta','navy']\n",
    "labels = ['Wild-type', 'Single mutant', 'Double mutant']\n",
    "for i in range(len(trace[0])-1):\n",
    "    ax.fill_between(np.arange(rng),np.sum(trace[:rng,1+i:],axis=1),color=colors[i])\n",
    "    \n",
    "    \n",
    "ax.spines['right'].set_visible(False)\n",
    "ax.spines['top'].set_visible(False)\n",
    "\n",
    "ax.spines['left'].set_linewidth(2)\n",
    "ax.spines['bottom'].set_linewidth(2)\n",
    "\n",
    "\n",
    "ax.set_ylim(0,200)\n",
    "ax.set_yticks([200])\n",
    "\n",
    "ax.set_yticklabels([1],fontsize=20)\n",
    "\n",
    "ax.set_ylabel('Frequency',fontsize=25)\n",
    "ax.set_xlabel('Position',fontsize=25)\n",
    "ax.set_xticks([])\n",
    "ax.set_xlim(0,rng)\n",
    "\n",
    "plt.savefig('clonal_interfere.pdf')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([  8., 113.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   2.,   0.,\n",
       "         0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n",
       "         1.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n",
       "         0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n",
       "         0.,   0.,   0.,   0.,   0.,   0.,   3.,   3.,   0.,   0.,   0.,\n",
       "         0.,   0.,   0.,   0.,   2.,   0.,   0.,   5.,   2.,   0.,   0.,\n",
       "         2.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n",
       "         0.,   0.,   0.,   0.,   0.,   0.,   0.,   4.,   0.,   0.,   0.,\n",
       "         0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n",
       "         0.,   0.,   1.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n",
       "         0.,   0.,   0.,   0.,  38.,   0.,   0.,   0.,   0.,   0.,   0.,\n",
       "         0.,   0.,  14.,   0.,   2.])"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "L[1500][10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 544,
   "metadata": {},
   "outputs": [],
   "source": [
    "neighbors = rand_neighbors(demes)\n",
    "cells = migration(L[neighbors],g_rates,K,r)\n",
    "counts = [cells_to_counts(cell,g_rates) for cell in cells]\n",
    "L[neighbors] = np.array(counts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 607,
   "metadata": {},
   "outputs": [],
   "source": [
    "neighbors = choice(demes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 650,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1.])"
      ]
     },
     "execution_count": 650,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "P=prob_mat(g_rates)\n",
    "#print(cell_types)\n",
    "P[tuple([np.where(cell_types[ind] == g_rates)[0] for ind in pick_ind])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 643,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([1]), array([1]))"
      ]
     },
     "execution_count": 643,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tuple([np.where(cell_types[ind] == g_rates)[0] for ind in pick_ind])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 662,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0. , 0.1])"
      ]
     },
     "execution_count": 662,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cell_types = np.repeat(g_rates, cell_counts.astype(int))\n",
    "cell_types[[0,-1]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 663,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.9])"
      ]
     },
     "execution_count": 663,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "P[tuple([np.where(cell_types[ind] == g_rates)[0] for ind in pick_ind])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 608,
   "metadata": {},
   "outputs": [],
   "source": [
    "cell_counts = L[neighbors]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 665,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1. , 0.9],\n",
       "       [1. , 1. ]])"
      ]
     },
     "execution_count": 665,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "P"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 667,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9"
      ]
     },
     "execution_count": 667,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "P[0,1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 659,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1.])"
      ]
     },
     "execution_count": 659,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "P[tuple([np.where(cell_types[ind] == g_rates)[0] for ind in pick_ind])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 664,
   "metadata": {},
   "outputs": [],
   "source": [
    "pick_ind = np.array([0,-1])\n",
    "cell_types = np.repeat(g_rates, cell_counts.astype(int))\n",
    "r= np.random.random()\n",
    "P=prob_mat(g_rates)\n",
    "#print(cell_types)\n",
    "if P[tuple([np.where(cell_types[ind] == g_rates)[0] for ind in pick_ind])]> r:\n",
    "    cell_types[pick_ind[1]] =cell_types[pick_ind[0]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 657,
   "metadata": {},
   "outputs": [],
   "source": [
    "cells= cell_types"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 600,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[array([75, 25]), array([99,  1])]"
      ]
     },
     "execution_count": 600,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[cells_to_counts(cell,g_rates) for cell in cells]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 601,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 74,  26],\n",
       "       [100,   0]])"
      ]
     },
     "execution_count": 601,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "L[[19,20]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 658,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([10, 90])"
      ]
     },
     "execution_count": 658,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cells_to_counts(cell_types,g_rates)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 623,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 9, 91])"
      ]
     },
     "execution_count": 623,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "L[neighbors]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 439,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "1it [02:40, 160.24s/it]"
     ]
    },
    {
     "ename": "OSError",
     "evalue": "[Errno 22] Invalid argument",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mOSError\u001b[0m                                   Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-439-32f6cabe4ed4>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     24\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     25\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 26\u001b[0;31m     \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msave\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'two_allele_data_%s.npy'\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mstart\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mresults\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mparams_out\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     27\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     28\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msave\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'two_allele_data_%s.npy'\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mstart\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mresults\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mparams_out\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/numpy/lib/npyio.py\u001b[0m in \u001b[0;36msave\u001b[0;34m(file, arr, allow_pickle, fix_imports)\u001b[0m\n\u001b[1;32m    519\u001b[0m         \u001b[0marr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masanyarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    520\u001b[0m         format.write_array(fid, arr, allow_pickle=allow_pickle,\n\u001b[0;32m--> 521\u001b[0;31m                            pickle_kwargs=pickle_kwargs)\n\u001b[0m\u001b[1;32m    522\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    523\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mown_fid\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/numpy/lib/format.py\u001b[0m in \u001b[0;36mwrite_array\u001b[0;34m(fp, array, version, allow_pickle, pickle_kwargs)\u001b[0m\n\u001b[1;32m    591\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mpickle_kwargs\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    592\u001b[0m             \u001b[0mpickle_kwargs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 593\u001b[0;31m         \u001b[0mpickle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdump\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprotocol\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mpickle_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    594\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0marray\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mflags\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mf_contiguous\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0marray\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mflags\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mc_contiguous\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    595\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misfileobj\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mOSError\u001b[0m: [Errno 22] Invalid argument"
     ]
    }
   ],
   "source": [
    "from stepping_stone_funcs import*\n",
    "from tqdm import tqdm\n",
    "from itertools import product\n",
    "import numpy as np\n",
    "import datetime\n",
    "\n",
    "start = datetime.datetime.now()\n",
    "K_space = np.array([100,500])\n",
    "mu_space = np.array([.0005,.001,.005])\n",
    "alphas = np.array([3,5])\n",
    "\n",
    "reps= 1\n",
    "\n",
    "params_out = ['reps='  +str(reps),'K='+str(K_space),'mu='+str(mu_space),'alphas='+str(alphas) ]\n",
    "\n",
    "r=.1\n",
    "\n",
    "results = []\n",
    "\n",
    "for rep, K,mu,a in tqdm(product(range(reps), K_space,mu_space, alphas)):\n",
    "    L = fix_time(K,2,r,a,mu,3/K)\n",
    "    results.append(np.asarray(L))\n",
    "    \n",
    "    \n",
    "    \n",
    "    np.save('two_allele_data_%s.npy' % start,np.array([results,params_out]))\n",
    "    \n",
    "np.save('two_allele_data_%s.npy' % start,np.array([results,params_out]))\n",
    "\n",
    "    \n",
    "    \n",
    "    \n",
    "            \n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "    \n",
    "    \n",
    "  \n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "            \n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 444,
   "metadata": {},
   "outputs": [
    {
     "ename": "OSError",
     "evalue": "[Errno 22] Invalid argument",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mOSError\u001b[0m                                   Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-444-895b7a4cf0e3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msave\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'two_allele_data.npy'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mresults\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mparams_out\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/numpy/lib/npyio.py\u001b[0m in \u001b[0;36msave\u001b[0;34m(file, arr, allow_pickle, fix_imports)\u001b[0m\n\u001b[1;32m    519\u001b[0m         \u001b[0marr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masanyarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    520\u001b[0m         format.write_array(fid, arr, allow_pickle=allow_pickle,\n\u001b[0;32m--> 521\u001b[0;31m                            pickle_kwargs=pickle_kwargs)\n\u001b[0m\u001b[1;32m    522\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    523\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mown_fid\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/numpy/lib/format.py\u001b[0m in \u001b[0;36mwrite_array\u001b[0;34m(fp, array, version, allow_pickle, pickle_kwargs)\u001b[0m\n\u001b[1;32m    591\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mpickle_kwargs\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    592\u001b[0m             \u001b[0mpickle_kwargs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 593\u001b[0;31m         \u001b[0mpickle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdump\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprotocol\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mpickle_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    594\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0marray\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mflags\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mf_contiguous\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0marray\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mflags\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mc_contiguous\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    595\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misfileobj\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mOSError\u001b[0m: [Errno 22] Invalid argument"
     ]
    }
   ],
   "source": [
    "np.save('two_allele_data.npy',np.array([results,params_out]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 443,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([list([array([[[  0, 100,   0],\n",
       "        [  3,  97,   0],\n",
       "        [  4,  96,   0],\n",
       "        ...,\n",
       "        [100,   0,   0],\n",
       "        [100,   0,   0],\n",
       "        [100,   0,   0]],\n",
       "\n",
       "       [[  1,  99,   0],\n",
       "        [  2,  98,   0],\n",
       "        [  2,  98,   0],\n",
       "        ...,\n",
       "        [100,   0,   0],\n",
       "        [100,   0,   0],\n",
       "        [100,   0,   0]],\n",
       "\n",
       "       [[  1,  99,   0],\n",
       "        [  2,  98,   0],\n",
       "        [  2,  98,   0],\n",
       "        ...,\n",
       "        [100,   0,   0],\n",
       "        [100,   0,   0],\n",
       "        [100,   0,   0]],\n",
       "\n",
       "       ...,\n",
       "\n",
       "       [[  1,   9,  90],\n",
       "        [  4,   2,  94],\n",
       "        [  8,   1,  91],\n",
       "        ...,\n",
       "        [100,   0,   0],\n",
       "        [100,   0,   0],\n",
       "        [100,   0,   0]],\n",
       "\n",
       "       [[  1,   9,  90],\n",
       "        [  4,   2,  94],\n",
       "        [  8,   1,  91],\n",
       "        ...,\n",
       "        [100,   0,   0],\n",
       "        [100,   0,   0],\n",
       "        [100,   0,   0]],\n",
       "\n",
       "       [[  4,   2,  94],\n",
       "        [  8,   1,  91],\n",
       "        [ 11,   1,  88],\n",
       "        ...,\n",
       "        [100,   0,   0],\n",
       "        [100,   0,   0],\n",
       "        [100,   0,   0]]]), array([[[  0, 100,   0],\n",
       "        [  3,  97,   0],\n",
       "        [  4,  96,   0],\n",
       "        ...,\n",
       "        [100,   0,   0],\n",
       "        [100,   0,   0],\n",
       "        [100,   0,   0]],\n",
       "\n",
       "       [[  1,  99,   0],\n",
       "        [  8,  92,   0],\n",
       "        [  5,  95,   0],\n",
       "        ...,\n",
       "        [100,   0,   0],\n",
       "        [100,   0,   0],\n",
       "        [100,   0,   0]],\n",
       "\n",
       "       [[  1,  99,   0],\n",
       "        [  8,  92,   0],\n",
       "        [  5,  95,   0],\n",
       "        ...,\n",
       "        [100,   0,   0],\n",
       "        [100,   0,   0],\n",
       "        [100,   0,   0]],\n",
       "\n",
       "       ...,\n",
       "\n",
       "       [[  1,   7,  92],\n",
       "        [  1,  15,  84],\n",
       "        [  1,   7,  92],\n",
       "        ...,\n",
       "        [100,   0,   0],\n",
       "        [100,   0,   0],\n",
       "        [100,   0,   0]],\n",
       "\n",
       "       [[  1,   7,  92],\n",
       "        [  1,  15,  84],\n",
       "        [  1,   7,  92],\n",
       "        ...,\n",
       "        [100,   0,   0],\n",
       "        [100,   0,   0],\n",
       "        [100,   0,   0]],\n",
       "\n",
       "       [[  5,   1,  94],\n",
       "        [  3,   1,  96],\n",
       "        [  8,   0,  92],\n",
       "        ...,\n",
       "        [100,   0,   0],\n",
       "        [100,   0,   0],\n",
       "        [100,   0,   0]]])]),\n",
       "       list(['reps=1', 'K=[100 500]', 'mu=[0.0005 0.001  0.005 ]', 'alphas=[3 5]'])],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 443,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.array([results,params_out])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 417,
   "metadata": {},
   "outputs": [],
   "source": [
    "fix_times = []\n",
    "for i in range(len(L_hist[0])):\n",
    "    fix_times.append(np.where(L_hist[:,i,1] <thresh)[0][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 435,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x15cb54e0b8>]"
      ]
     },
     "execution_count": 435,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(np.array(fix_times)/K)\n",
    "plt.plot(100*(40-np.arange(40)) / (2*(r*alpha)**.5 - 2*(r)**.5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 429,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n",
       "       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,\n",
       "       34, 35, 36, 37, 38, 39])"
      ]
     },
     "execution_count": 429,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.arange(40)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-54-ea47c38357ac>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0madd\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlengths\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mu\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m         \u001b[0madd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mK\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mzeros\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_allele\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m     \u001b[0mhist_pad\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mu\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0madd\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "lengths = [len(u) for u in L_history]\n",
    "hist_pad =  \n",
    "for u in L_history:\n",
    "    add= [] \n",
    "    for i in range((max(lengths) - len(u))):\n",
    "        add.append(np.append([K],np.zeros(n_allele)))\n",
    "    hist_pad.append(np.append(u,np.asarray(add),axis=0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x151e0a04e0>]"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot([len(u) for u in L_history])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x151d440518>]"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot([len(u) for u in out1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 545,
   "metadata": {},
   "outputs": [],
   "source": [
    "out2 = run_stepping_stone(n_gen = 3000,K = 100,n_allele = 1,r = .1,alpha = 5,mu = .001)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 546,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x17b6f89c88>,\n",
       " <matplotlib.lines.Line2D at 0x17b7097550>]"
      ]
     },
     "execution_count": 546,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "stand = odeint(standing_wave,[1,-(2*2**.5)/100],np.arange(70),args=(2*2**.5,1))[:,0]\n",
    "w_0 = (500*stand).astype(int)\n",
    "w_0 = w_0[w_0>1]\n",
    "plt.plot(w_0)\n",
    "plt.plot(out2[-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 541,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.005656"
      ]
     },
     "execution_count": 541,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(2* 1.414)/500"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [],
   "source": [
    "K=500\n",
    "n_allele=1\n",
    "\n",
    "L_empty= np.append([K],np.zeros(n_allele,dtype=int))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[126, 374],\n",
       "       [191, 309],\n",
       "       [228, 272],\n",
       "       [276, 224],\n",
       "       [290, 210],\n",
       "       [315, 185],\n",
       "       [337, 163],\n",
       "       [360, 140],\n",
       "       [375, 125],\n",
       "       [388, 112],\n",
       "       [402,  98],\n",
       "       [420,  80],\n",
       "       [438,  62],\n",
       "       [444,  56],\n",
       "       [447,  53],\n",
       "       [464,  36],\n",
       "       [467,  33],\n",
       "       [474,  26],\n",
       "       [481,  19],\n",
       "       [483,  17],\n",
       "       [487,  13],\n",
       "       [489,  11],\n",
       "       [493,   7],\n",
       "       [495,   5],\n",
       "       [497,   3],\n",
       "       [495,   5],\n",
       "       [497,   3],\n",
       "       [498,   2],\n",
       "       [499,   1],\n",
       "       [500,   0]])"
      ]
     },
     "execution_count": 155,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.append(out[300],[L_empty],axis=0)\n",
    "          "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 485,
   "metadata": {},
   "outputs": [],
   "source": [
    "stand = odeint(standing_wave,[1,-.1*r**2],np.arange(50),args=(1,r))[:,0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 486,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x15cbcfc710>]"
      ]
     },
     "execution_count": 486,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(stand)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 482,
   "metadata": {},
   "outputs": [],
   "source": [
    "n_gen=1000\n",
    "K=100\n",
    "n_allele=3\n",
    "r=.1\n",
    "alpha=2\n",
    "mu=.001\n",
    "L_h = run_stepping_stone(n_gen,K,n_allele,r,alpha,mu)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 483,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x15cc0afcc0>,\n",
       " <matplotlib.lines.Line2D at 0x15cc0afe10>,\n",
       " <matplotlib.lines.Line2D at 0x15cc0aff60>,\n",
       " <matplotlib.lines.Line2D at 0x15cc0bc0f0>]"
      ]
     },
     "execution_count": 483,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(L_h[-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def fix_time_2allele(K,r,alpha,mu,thresh):\n",
    "    func_args = [K,n_allele,r,alpha,mu]\n",
    "    ##initialize probability matrix\n",
    "    P = np.ones((n_allele+1,n_allele+1))\n",
    "    P[0,1:] = 1-r*(alpha**np.arange(n_allele))\n",
    "    \n",
    "    stand = odeint(standing_wave,[1,-r**.5],np.arange(70),args=(1,r))[:,0]\n",
    "    w_0 = (K*stand).astype(int)\n",
    "    w_0 = w_0[w_0>1]\n",
    "    \n",
    "    ##initialize array\n",
    "    L_empty= np.append([K],np.zeros(n_allele,dtype=int))\n",
    "    L0 = np.zeros((len(w_0),n_allele+1),dtype=int)\n",
    "    L0[:,1] = w_0\n",
    "    L0[:,0] = K-w_0\n",
    "    L= np.append(L0,[L_empty],axis=0)\n",
    " \n",
    "\n",
    "    #begin evolution\n",
    "    fixed=False\n",
    "    fixed_hist=[]\n",
    "    est_hist=[]\n",
    "    t = 0\n",
    "    while not fixed:\n",
    "        L = update(L,L_empty,P,*func_args)\n",
    "        fix_bools = L[:,1]< int(thresh*K)\n",
    "        est_bools = L[:,2]> int(1/(r*alpha))\n",
    "        fixed= all(fix_bools)\n",
    "        if any(fix_bools):\n",
    "            fixed_hist.append(fix_bools)\n",
    "            \n",
    "        if any(est_bools):\n",
    "            est_hist.append(est_bools)\n",
    "        t+=1\n",
    "\n",
    "    return fixed_hist,est_hist,L"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: 'start/two_allele_data_2019-12-08 20:03:00.412718.npy'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-35-5dd95285160a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 21\u001b[0;31m     \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msave\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'start/two_allele_data_%s.npy'\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mstart\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mresults\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mparams_out\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     22\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msave\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'start/two_allele_data_%s.npy'\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mstart\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mresults\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mparams_out\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/numpy/lib/npyio.py\u001b[0m in \u001b[0;36msave\u001b[0;34m(file, arr, allow_pickle, fix_imports)\u001b[0m\n\u001b[1;32m    500\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mfile\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mendswith\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'.npy'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    501\u001b[0m             \u001b[0mfile\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfile\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m'.npy'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 502\u001b[0;31m         \u001b[0mfid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"wb\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    503\u001b[0m         \u001b[0mown_fid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    504\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mis_pathlib_path\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'start/two_allele_data_2019-12-08 20:03:00.412718.npy'"
     ]
    }
   ],
   "source": [
    "import datetime\n",
    "from stepping_stone_funcs import*\n",
    "start = datetime.datetime.now()\n",
    "K_space = np.array([500,1000])\n",
    "mu_space = np.array([.001,.005])\n",
    "alphas = np.array([2,5])\n",
    "\n",
    "params_out = ['K='+str(K_space),'mu='+str(mu_space),'alphas='+str(alphas) ],\n",
    "\n",
    "r=.1\n",
    "\n",
    "results = []\n",
    "product(K_space,mu_space, alphas)\n",
    "for K,mu,a in product(K_space,mu_space, alphas):\n",
    "    fix,exp,L = fix_time_2allele(K,r,a,mu,3/K)\n",
    "    results.append([fix,exp,L])\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "    np.save('$s/two_allele_data_%s.npy' % start,np.array([results,params_out]))\n",
    "np.save('/start/two_allele_data_%s.npy' % start,np.array([results,params_out]))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.save('wo_allele_data_%s.npy' % start,np.array([results,params_out]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1221,
   "metadata": {},
   "outputs": [],
   "source": [
    "K=1000\n",
    "n_allele=2\n",
    "r=.1\n",
    "alpha=5\n",
    "mu=.001\n",
    "\n",
    "fix,est,L = fix_time_2allele(K,r,alpha,mu,thresh=.001)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 573,
   "metadata": {},
   "outputs": [],
   "source": [
    "def fix_time(K,n_allele,r,alpha,mu,thresh, track):\n",
    "    func_args = [K,n_allele,r,alpha,mu]\n",
    "    ##initialize probability matrix\n",
    "    P = np.ones((n_allele+1,n_allele+1))\n",
    "    P[0,1:] = 1-r*(alpha**np.arange(n_allele))\n",
    "    \n",
    "    L,L_empty = initialize(*func_args)\n",
    "    L_history=[L]\n",
    "    #begin evolution\n",
    "    fixed=False\n",
    "    t = 0\n",
    "    if track:\n",
    "        fix_times = np.zeros(len(L))\n",
    "        est_times = np.zeros(len(L))\n",
    "        fb_1, eb_1 = (np.zeros(len(L)) == 1),(np.zeros(len(L)) == 1) \n",
    "    while not fixed:\n",
    "        L = update(L,L_empty,P,*func_args)\n",
    "        L = recenter(L,L_empty,K)\n",
    "        fix_bools = L[:,1] < int(thresh*K)\n",
    "        est_bools = L[:,2] > int(1/(r*alpha))\n",
    "        fixed= all(fix_bools)\n",
    "        if track:\n",
    "            fix_times  = [max(i,time) for i, time in zip((fix_bools^fb_1)*t,fix_times)]\n",
    "            est_times  = [max(i,time) for i, time in zip((est_bools^eb_1)*t,est_times)]\n",
    "            fb_1,eb_1 = fix_bools,est_bools\n",
    "        t+=1\n",
    "    if not track:\n",
    "        return L\n",
    "    else: \n",
    "\n",
    "        fix_times,est_times"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 574,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "0it [00:00, ?it/s]\u001b[A"
     ]
    },
    {
     "ename": "TypeError",
     "evalue": "cannot unpack non-iterable NoneType object",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-574-4c1b690965c1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0mproduct\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mK_space\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mmu_space\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0malphas\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mrep\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mK\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mmu\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0ma\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtqdm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mproduct\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreps\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mK_space\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mmu_space\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0malphas\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m     \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0me\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfix_time\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mK\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mr\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mmu\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mK\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     15\u001b[0m     \u001b[0mresults\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mTypeError\u001b[0m: cannot unpack non-iterable NoneType object"
     ]
    }
   ],
   "source": [
    "\n",
    "start = datetime.datetime.now()\n",
    "K_space = np.array([100])\n",
    "mu_space = np.array([.001])\n",
    "alphas = np.array([5])\n",
    "\n",
    "params_out = ['K='+str(K_space),'mu='+str(mu_space),'alphas='+str(alphas) ],\n",
    "\n",
    "r=.1\n",
    "\n",
    "results = []\n",
    "product(K_space,mu_space, alphas)\n",
    "for rep, K,mu,a in tqdm(product(range(reps), K_space,mu_space, alphas)):\n",
    "    f,e = fix_time(K,2,r,a,mu,3/K, True)\n",
    "    results.append([f,e])\n",
    "    \n",
    "    \n",
    "    \n",
    "\n",
    "\n",
    "    \n",
    "    \n",
    "  \n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "            \n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[array([108712, 108813, 108133, 101828,  92279,  92238,  85485,  84096,\n",
       "         83175,  82505,  81714,  78785,  76247,  76241,  76160,  75756,\n",
       "         75535,  72066,  69764,  71064,  71738,  71020,  65792,  62630,\n",
       "         63761,  61423,  58831,  60079,      0,      0,      0,      0,\n",
       "             0]),\n",
       " array([ 17029,  16329,  23658,  25264,  31096,  34508,  37436,  37313,\n",
       "         40182,  36506,  39896,  36886,  33707,  31493,  90466,  89726,\n",
       "         91920,  93218,  96217, 108310, 102083, 101828,  85485,  79431,\n",
       "         80943,  76160,  76160,  75756,  72169,  72066,  65792,  65337,\n",
       "         65078]),\n",
       " array([[  6,   2,  92],\n",
       "        [  3,   2,  95],\n",
       "        [  4,   1,  95],\n",
       "        [  6,   0,  94],\n",
       "        [ 10,   0,  90],\n",
       "        [  8,   0,  92],\n",
       "        [ 16,   0,  84],\n",
       "        [ 17,   0,  83],\n",
       "        [ 22,   0,  78],\n",
       "        [ 30,   0,  70],\n",
       "        [ 55,   0,  45],\n",
       "        [ 55,   0,  45],\n",
       "        [ 55,   0,  45],\n",
       "        [ 79,   0,  21],\n",
       "        [ 87,   0,  13],\n",
       "        [ 83,   0,  17],\n",
       "        [ 82,   0,  18],\n",
       "        [ 84,   0,  16],\n",
       "        [ 97,   0,   3],\n",
       "        [ 96,   0,   4],\n",
       "        [ 98,   0,   2],\n",
       "        [ 99,   0,   1],\n",
       "        [100,   0,   0],\n",
       "        [100,   0,   0],\n",
       "        [100,   0,   0],\n",
       "        [100,   0,   0],\n",
       "        [100,   0,   0],\n",
       "        [100,   0,   0],\n",
       "        [100,   0,   0],\n",
       "        [100,   0,   0],\n",
       "        [100,   0,   0],\n",
       "        [100,   0,   0],\n",
       "        [100,   0,   0]])]"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 563,
   "metadata": {},
   "outputs": [],
   "source": [
    " newest_two = max(glob.iglob('t*.npy'), key=os.path.getctime)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 555,
   "metadata": {},
   "outputs": [],
   "source": [
    " newest_mult = max(glob.iglob('m*.npy'), key=os.path.getctime)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 556,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'multi_allele_data_2019-12-15 18:45:27.379389.npy'"
      ]
     },
     "execution_count": 556,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newest_mult"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 564,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = np.load(newest_two)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 565,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "cannot reshape array of size 7 into shape (5,2,2,2,2)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-565-3b2640c8cbb7>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m: cannot reshape array of size 7 into shape (5,2,2,2,2)"
     ]
    }
   ],
   "source": [
    "data=np.array(data[0]).reshape(5,2,2,2,2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 566,
   "metadata": {},
   "outputs": [
    {
     "ename": "IndexError",
     "evalue": "too many indices for array",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-566-80f6d76089b9>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mIndexError\u001b[0m: too many indices for array"
     ]
    }
   ],
   "source": [
    "data[4,1,1,1,1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([597697, 596879, 596481, 598734, 599524, 596864, 595428, 590712,\n",
       "       589717, 583326, 580909, 575037, 573288, 576084, 554873, 555615,\n",
       "       554959, 554873, 537452, 535794, 535779, 532046, 532281, 525545,\n",
       "       417080, 413783, 411134, 407941, 406519, 404372, 404007, 404064,\n",
       "       253432])"
      ]
     },
     "execution_count": 199,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[4,0,0,0,0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x152177ab70>]"
      ]
     },
     "execution_count": 201,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(data[1,0,0,0,0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1521ea7da0>]"
      ]
     },
     "execution_count": 228,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(np.mean(data[:,1,1,1,0],axis=0)/(500*1000))\n",
    "plt.plot(np.arange(len(np.mean(data[:,1,1,1,0],axis=0)))[::-1]/(2*(5**2-1)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([254593, 256908, 259315, 260013, 258703, 258266, 248614, 234790,\n",
       "       234103, 233220, 232981, 231929, 229642, 229529, 225482, 219859,\n",
       "       219063, 218708, 213503, 209350, 185452, 181363, 177553, 162926,\n",
       "       161639, 157355, 155997, 155830, 151426, 145486, 140696,      0,\n",
       "            0])"
      ]
     },
     "execution_count": 150,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[0,0,0,0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x15216a0b38>]"
      ]
     },
     "execution_count": 168,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "hi=data[0,1,0,0]\n",
    "plt.plot(hi[:-5])\n",
    "\n",
    "plt.plot(100000*(np.arange(len(hi[:-5]))[::-1]/(2*(3)**2 -2))+hi[-6])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[  4,   2,  93,   1,   0,   0,   0,   0,   0,   0,   0],\n",
       "       [  1,   2,  90,   7,   0,   0,   0,   0,   0,   0,   0],\n",
       "       [  1,   0,  92,   6,   1,   0,   0,   0,   0,   0,   0],\n",
       "       [  5,   0,  87,   8,   0,   0,   0,   0,   0,   0,   0],\n",
       "       [  6,   0,  80,  14,   0,   0,   0,   0,   0,   0,   0],\n",
       "       [  8,   0,  74,  18,   0,   0,   0,   0,   0,   0,   0],\n",
       "       [  7,   0,  74,  19,   0,   0,   0,   0,   0,   0,   0],\n",
       "       [  8,   0,  70,  22,   0,   0,   0,   0,   0,   0,   0],\n",
       "       [ 11,   0,  77,  12,   0,   0,   0,   0,   0,   0,   0],\n",
       "       [ 24,   0,  53,  23,   0,   0,   0,   0,   0,   0,   0],\n",
       "       [ 30,   0,  52,  18,   0,   0,   0,   0,   0,   0,   0],\n",
       "       [ 40,   0,  44,  16,   0,   0,   0,   0,   0,   0,   0],\n",
       "       [ 58,   0,  29,  13,   0,   0,   0,   0,   0,   0,   0],\n",
       "       [ 69,   0,  18,  13,   0,   0,   0,   0,   0,   0,   0],\n",
       "       [ 71,   0,  22,   7,   0,   0,   0,   0,   0,   0,   0],\n",
       "       [ 83,   0,  13,   4,   0,   0,   0,   0,   0,   0,   0],\n",
       "       [ 83,   0,  15,   2,   0,   0,   0,   0,   0,   0,   0],\n",
       "       [ 78,   0,  21,   1,   0,   0,   0,   0,   0,   0,   0],\n",
       "       [ 86,   0,  14,   0,   0,   0,   0,   0,   0,   0,   0],\n",
       "       [ 82,   0,  18,   0,   0,   0,   0,   0,   0,   0,   0],\n",
       "       [ 94,   0,   6,   0,   0,   0,   0,   0,   0,   0,   0],\n",
       "       [ 87,   0,  13,   0,   0,   0,   0,   0,   0,   0,   0],\n",
       "       [ 92,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0],\n",
       "       [ 84,   0,  16,   0,   0,   0,   0,   0,   0,   0,   0],\n",
       "       [ 94,   0,   6,   0,   0,   0,   0,   0,   0,   0,   0],\n",
       "       [ 98,   0,   2,   0,   0,   0,   0,   0,   0,   0,   0],\n",
       "       [100,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],\n",
       "       [100,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],\n",
       "       [ 98,   0,   2,   0,   0,   0,   0,   0,   0,   0,   0],\n",
       "       [100,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],\n",
       "       [100,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0]])"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[0,0,0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1533a4c048>]"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(lens)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([     0.,      0.,      0.,      0., 121433., 122753., 123115.,\n",
       "       123890., 119972., 129190., 132678., 132678., 132678., 132678.,\n",
       "       132678., 132678., 132678., 132678., 132678., 132678., 132678.,\n",
       "       132678., 132678., 132678., 132678., 132678., 132678., 132678.,\n",
       "       132678., 132678., 132678., 132678., 132678.])"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0, 100, 100, 100, 100])"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pad_data[100]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([False, False, False, False, False, False, False, False, False,\n",
       "       False, False, False, False, False, False, False, False, False,\n",
       "       False, False,  True,  True,  True])"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    " data[0,0,0,0][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[False, False, False, False]"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[False]*4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [],
   "source": [
    "s=.1\n",
    "r=.5\n",
    "m=.1\n",
    "K=1000\n",
    "se = .5*s*m*np.log(2/m) / r\n",
    "p = (np.exp(-2*se)-1)/ (np.exp(-4*se*K)-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.058155079116972264"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "p"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
